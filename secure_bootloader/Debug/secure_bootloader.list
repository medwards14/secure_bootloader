
secure_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a8c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d58  08001d58  00002d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d68  08001d68  00002d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001d6c  08001d6c  00002d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001d70  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001d80  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001d80  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000660f  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000008f  00000000  00000000  0000964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00005e99  00000000  00000000  000096dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001090  00000000  00000000  0000f575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000600  00000000  00000000  00010608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00137da3  00000000  00000000  00010c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044f  00000000  00000000  001489ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030192  00000000  00000000  00148dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00178f8c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001654  00000000  00000000  00178fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08001d40 	.word	0x08001d40

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08001d40 	.word	0x08001d40

0800030c <jump_to_application>:
.global jump_to_application
.type   jump_to_application, %function

jump_to_application:

    cpsid i
 800030c:	b672      	cpsid	i
    LDR   R0, =0x08020000
 800030e:	4802      	ldr	r0, [pc, #8]	@ (8000318 <jump_to_application+0xc>)
    LDR   R1, [R0, #0]
 8000310:	6801      	ldr	r1, [r0, #0]
    MOV   SP, R1
 8000312:	468d      	mov	sp, r1
    LDR   R1, [R0, #4]
 8000314:	6841      	ldr	r1, [r0, #4]
    BX    R1
 8000316:	4708      	bx	r1
    LDR   R0, =0x08020000
 8000318:	08020000 	.word	0x08020000

0800031c <Bootloader_DeInit>:
  * @brief  The application entry point.
  * @retval int
  */

static void Bootloader_DeInit(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000322:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <Bootloader_DeInit+0xc4>)
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000328:	f3bf 8f4f 	dsb	sy
}
 800032c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800032e:	f3bf 8f6f 	isb	sy
}
 8000332:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000334:	4b2b      	ldr	r3, [pc, #172]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a2a      	ldr	r2, [pc, #168]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 800033a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800033e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000340:	4b28      	ldr	r3, [pc, #160]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000348:	f3bf 8f4f 	dsb	sy
}
 800034c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800034e:	f3bf 8f6f 	isb	sy
}
 8000352:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000354:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000356:	4b23      	ldr	r3, [pc, #140]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 8000358:	2200      	movs	r2, #0
 800035a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800035e:	f3bf 8f4f 	dsb	sy
}
 8000362:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8000364:	4b1f      	ldr	r3, [pc, #124]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a1e      	ldr	r2, [pc, #120]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 800036a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800036e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000370:	f3bf 8f4f 	dsb	sy
}
 8000374:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000376:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 8000378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800037c:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	0b5b      	lsrs	r3, r3, #13
 8000382:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000386:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	08db      	lsrs	r3, r3, #3
 800038c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000390:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	015a      	lsls	r2, r3, #5
 8000396:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800039a:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80003a0:	4910      	ldr	r1, [pc, #64]	@ (80003e4 <Bootloader_DeInit+0xc8>)
 80003a2:	4313      	orrs	r3, r2
 80003a4:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	607a      	str	r2, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1ef      	bne.n	8000392 <Bootloader_DeInit+0x76>
    } while(sets-- != 0U);
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	60ba      	str	r2, [r7, #8]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1e5      	bne.n	8000388 <Bootloader_DeInit+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
 80003bc:	f3bf 8f4f 	dsb	sy
}
 80003c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c2:	f3bf 8f6f 	isb	sy
}
 80003c6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80003c8:	bf00      	nop

	SCB_DisableICache();
	SCB_DisableDCache();

	HAL_RCC_DeInit();
 80003ca:	f000 fc59 	bl	8000c80 <HAL_RCC_DeInit>
	HAL_DeInit();
 80003ce:	f000 fa03 	bl	80007d8 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 80003d2:	b672      	cpsid	i
}
 80003d4:	bf00      	nop

	__disable_irq();
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <main>:

int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ec:	f000 f868 	bl	80004c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 f9b6 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f806 	bl	8000404 <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  Bootloader_DeInit();
 80003f8:	f7ff ff90 	bl	800031c <Bootloader_DeInit>

  jump_to_application();
 80003fc:	f7ff ff86 	bl	800030c <jump_to_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <main+0x18>

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b09c      	sub	sp, #112	@ 0x70
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040e:	224c      	movs	r2, #76	@ 0x4c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fc68 	bl	8001ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2220      	movs	r2, #32
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fc62 	bl	8001ce8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f000 fbf1 	bl	8000c0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <SystemClock_Config+0xb8>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000436:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <SystemClock_Config+0xb8>)
 8000438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <SystemClock_Config+0xb8>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800044a:	bf00      	nop
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <SystemClock_Config+0xb8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000458:	d1f8      	bne.n	800044c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045a:	2302      	movs	r3, #2
 800045c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800045e:	2301      	movs	r3, #1
 8000460:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000462:	2340      	movs	r3, #64	@ 0x40
 8000464:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	2300      	movs	r3, #0
 8000468:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fd30 	bl	8000ed4 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800047a:	f000 f84d 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	233f      	movs	r3, #63	@ 0x3f
 8000480:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 f8f0 	bl	8001688 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004ae:	f000 f833 	bl	8000518 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3770      	adds	r7, #112	@ 0x70
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	58024800 	.word	0x58024800

080004c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004d2:	f000 fb23 	bl	8000b1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004d6:	2301      	movs	r3, #1
 80004d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004da:	2300      	movs	r3, #0
 80004dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004e2:	231f      	movs	r3, #31
 80004e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004e6:	2387      	movs	r3, #135	@ 0x87
 80004e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004ee:	2300      	movs	r3, #0
 80004f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004f6:	2301      	movs	r3, #1
 80004f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000502:	463b      	mov	r3, r7
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb41 	bl	8000b8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800050a:	2004      	movs	r0, #4
 800050c:	f000 fb1e 	bl	8000b4c <HAL_MPU_Enable>

}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_MspInit+0x30>)
 800052c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <HAL_MspInit+0x30>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_MspInit+0x30>)
 800053c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	58024400 	.word	0x58024400

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <NMI_Handler+0x4>

08000560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <UsageFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f9b1 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005bc:	4b3e      	ldr	r3, [pc, #248]	@ (80006b8 <SystemInit+0x100>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c2:	4a3d      	ldr	r2, [pc, #244]	@ (80006b8 <SystemInit+0x100>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005cc:	4b3b      	ldr	r3, [pc, #236]	@ (80006bc <SystemInit+0x104>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	2b06      	cmp	r3, #6
 80005d6:	d807      	bhi.n	80005e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005d8:	4b38      	ldr	r3, [pc, #224]	@ (80006bc <SystemInit+0x104>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <SystemInit+0x104>)
 80005e2:	f043 0307 	orr.w	r3, r3, #7
 80005e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005e8:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <SystemInit+0x108>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a34      	ldr	r2, [pc, #208]	@ (80006c0 <SystemInit+0x108>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <SystemInit+0x108>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <SystemInit+0x108>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4930      	ldr	r1, [pc, #192]	@ (80006c0 <SystemInit+0x108>)
 8000600:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <SystemInit+0x10c>)
 8000602:	4013      	ands	r3, r2
 8000604:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <SystemInit+0x104>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d007      	beq.n	8000622 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <SystemInit+0x104>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f023 030f 	bic.w	r3, r3, #15
 800061a:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <SystemInit+0x104>)
 800061c:	f043 0307 	orr.w	r3, r3, #7
 8000620:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000622:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <SystemInit+0x108>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <SystemInit+0x108>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <SystemInit+0x108>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemInit+0x108>)
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x110>)
 8000638:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <SystemInit+0x108>)
 800063c:	4a23      	ldr	r2, [pc, #140]	@ (80006cc <SystemInit+0x114>)
 800063e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemInit+0x108>)
 8000642:	4a23      	ldr	r2, [pc, #140]	@ (80006d0 <SystemInit+0x118>)
 8000644:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <SystemInit+0x108>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <SystemInit+0x108>)
 800064e:	4a20      	ldr	r2, [pc, #128]	@ (80006d0 <SystemInit+0x118>)
 8000650:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <SystemInit+0x108>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <SystemInit+0x108>)
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <SystemInit+0x118>)
 800065c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <SystemInit+0x108>)
 8000660:	2200      	movs	r2, #0
 8000662:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <SystemInit+0x108>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a15      	ldr	r2, [pc, #84]	@ (80006c0 <SystemInit+0x108>)
 800066a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800066e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <SystemInit+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <SystemInit+0x108>)
 8000678:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800067c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d113      	bne.n	80006ac <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <SystemInit+0x108>)
 8000686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <SystemInit+0x108>)
 800068c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000690:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <SystemInit+0x11c>)
 8000696:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800069a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <SystemInit+0x108>)
 800069e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006a2:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <SystemInit+0x108>)
 80006a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	52002000 	.word	0x52002000
 80006c0:	58024400 	.word	0x58024400
 80006c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006c8:	02020200 	.word	0x02020200
 80006cc:	01ff0000 	.word	0x01ff0000
 80006d0:	01010280 	.word	0x01010280
 80006d4:	52004000 	.word	0x52004000

080006d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <ExitRun0Mode+0x2c>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <ExitRun0Mode+0x2c>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80006e8:	bf00      	nop
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <ExitRun0Mode+0x2c>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	58024800 	.word	0x58024800

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000744 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800070c:	f7ff ffe4 	bl	80006d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000710:	f7ff ff52 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	@ (800074c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	@ (8000758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f001 fadd 	bl	8001cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073e:	f7ff fe53 	bl	80003e8 <main>
  bx  lr
 8000742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000744:	24008000 	.word	0x24008000
  ldr r0, =_sdata
 8000748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800074c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000750:	08001d70 	.word	0x08001d70
  ldr r2, =_sbss
 8000754:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000758:	24000030 	.word	0x24000030

0800075c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC3_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f9a6 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800076c:	f001 f942 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 8000770:	4602      	mov	r2, r0
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_Init+0x68>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	4913      	ldr	r1, [pc, #76]	@ (80007cc <HAL_Init+0x6c>)
 800077e:	5ccb      	ldrb	r3, [r1, r3]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	fa22 f303 	lsr.w	r3, r2, r3
 8000788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_Init+0x68>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <HAL_Init+0x6c>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	fa22 f303 	lsr.w	r3, r2, r3
 80007a0:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <HAL_Init+0x70>)
 80007a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007a4:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <HAL_Init+0x74>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f87c 	bl	80008a8 <HAL_InitTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e002      	b.n	80007c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007ba:	f7ff feb3 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	58024400 	.word	0x58024400
 80007cc:	08001d58 	.word	0x08001d58
 80007d0:	24000004 	.word	0x24000004
 80007d4:	24000000 	.word	0x24000000

080007d8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 80007dc:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <HAL_DeInit+0x9c>)
 80007de:	4a26      	ldr	r2, [pc, #152]	@ (8000878 <HAL_DeInit+0xa0>)
 80007e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 80007e2:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <HAL_DeInit+0x9c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <HAL_DeInit+0x9c>)
 80007ea:	4a24      	ldr	r2, [pc, #144]	@ (800087c <HAL_DeInit+0xa4>)
 80007ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 80007f0:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <HAL_DeInit+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <HAL_DeInit+0x9c>)
 80007fa:	4a21      	ldr	r2, [pc, #132]	@ (8000880 <HAL_DeInit+0xa8>)
 80007fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <HAL_DeInit+0x9c>)
 8000802:	2200      	movs	r2, #0
 8000804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <HAL_DeInit+0x9c>)
 800080a:	4a1e      	ldr	r2, [pc, #120]	@ (8000884 <HAL_DeInit+0xac>)
 800080c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_DeInit+0x9c>)
 8000812:	2200      	movs	r2, #0
 8000814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <HAL_DeInit+0x9c>)
 800081a:	2208      	movs	r2, #8
 800081c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_DeInit+0x9c>)
 8000822:	2200      	movs	r2, #0
 8000824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_DeInit+0x9c>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <HAL_DeInit+0xb0>)
 800082c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_DeInit+0x9c>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_DeInit+0x9c>)
 800083a:	4a14      	ldr	r2, [pc, #80]	@ (800088c <HAL_DeInit+0xb4>)
 800083c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_DeInit+0x9c>)
 8000842:	2200      	movs	r2, #0
 8000844:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_DeInit+0x9c>)
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <HAL_DeInit+0xb8>)
 800084c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_DeInit+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_DeInit+0x9c>)
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_DeInit+0xbc>)
 800085c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <HAL_DeInit+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000868:	f000 f816 	bl	8000898 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	58024400 	.word	0x58024400
 8000878:	00e95011 	.word	0x00e95011
 800087c:	02008023 	.word	0x02008023
 8000880:	00030271 	.word	0x00030271
 8000884:	032806ff 	.word	0x032806ff
 8000888:	eaffc3ff 	.word	0xeaffc3ff
 800088c:	03000136 	.word	0x03000136
 8000890:	405730f3 	.word	0x405730f3
 8000894:	0420deaa 	.word	0x0420deaa

08000898 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_InitTick+0x60>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e021      	b.n	8000900 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_InitTick+0x64>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_InitTick+0x60>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f915 	bl	8000b02 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f8ed 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <HAL_InitTick+0x68>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2400000c 	.word	0x2400000c
 800090c:	24000000 	.word	0x24000000
 8000910:	24000008 	.word	0x24000008

08000914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2400000c 	.word	0x2400000c
 8000938:	2400002c 	.word	0x2400002c

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2400002c 	.word	0x2400002c

08000954 <__NVIC_SetPriorityGrouping>:
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <__NVIC_SetPriorityGrouping+0x40>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	4313      	orrs	r3, r2
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <__NVIC_SetPriorityGrouping+0x40>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	05fa0000 	.word	0x05fa0000

0800099c <__NVIC_GetPriorityGrouping>:
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_SetPriority>:
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	@ (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	@ 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	@ 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff47 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff5e 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff90 	bl	8000a0c <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5f 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffb2 	bl	8000a74 <SysTick_Config>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b20:	f3bf 8f5f 	dmb	sy
}
 8000b24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <HAL_MPU_Disable+0x28>)
 8000b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2a:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_MPU_Disable+0x28>)
 8000b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b30:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_MPU_Disable+0x2c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	e000ed90 	.word	0xe000ed90

08000b4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <HAL_MPU_Enable+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_MPU_Enable+0x3c>)
 8000b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <HAL_MPU_Enable+0x3c>)
 8000b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b70:	f3bf 8f6f 	isb	sy
}
 8000b74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed90 	.word	0xe000ed90
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	785a      	ldrb	r2, [r3, #1]
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_MPU_ConfigRegion+0x7c>)
 8000b9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_MPU_ConfigRegion+0x7c>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <HAL_MPU_ConfigRegion+0x7c>)
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ba8:	4a17      	ldr	r2, [pc, #92]	@ (8000c08 <HAL_MPU_ConfigRegion+0x7c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7b1b      	ldrb	r3, [r3, #12]
 8000bb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7adb      	ldrb	r3, [r3, #11]
 8000bba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7a9b      	ldrb	r3, [r3, #10]
 8000bc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b5b      	ldrb	r3, [r3, #13]
 8000bca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7b9b      	ldrb	r3, [r3, #14]
 8000bd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7bdb      	ldrb	r3, [r3, #15]
 8000bda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7a5b      	ldrb	r3, [r3, #9]
 8000be2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000be4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7a1b      	ldrb	r3, [r3, #8]
 8000bea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bf6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bf8:	6113      	str	r3, [r2, #16]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed90 	.word	0xe000ed90

08000c0c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d00a      	beq.n	8000c36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d001      	beq.n	8000c32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e01f      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e01d      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f023 0207 	bic.w	r2, r3, #7
 8000c3e:	490f      	ldr	r1, [pc, #60]	@ (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000c46:	f7ff fe79 	bl	800093c <HAL_GetTick>
 8000c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c4c:	e009      	b.n	8000c62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000c4e:	f7ff fe75 	bl	800093c <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c5c:	d901      	bls.n	8000c62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e007      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c6e:	d1ee      	bne.n	8000c4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	58024800 	.word	0x58024800

08000c80 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8000c86:	4b89      	ldr	r3, [pc, #548]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d80f      	bhi.n	8000cb2 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8000c92:	4b86      	ldr	r3, [pc, #536]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 030f 	bic.w	r3, r3, #15
 8000c9a:	4a84      	ldr	r2, [pc, #528]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000c9c:	f043 0307 	orr.w	r3, r3, #7
 8000ca0:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8000ca2:	4b82      	ldr	r3, [pc, #520]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	2b07      	cmp	r3, #7
 8000cac:	d001      	beq.n	8000cb2 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0f7      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000cb2:	f7ff fe43 	bl	800093c <HAL_GetTick>
 8000cb6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fe39 	bl	800093c <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e0e4      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cd8:	4b75      	ldr	r3, [pc, #468]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8000ce4:	4b72      	ldr	r3, [pc, #456]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a71      	ldr	r2, [pc, #452]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000cea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000cee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb4 <HAL_RCC_DeInit+0x234>)
 8000cf8:	4a6f      	ldr	r2, [pc, #444]	@ (8000eb8 <HAL_RCC_DeInit+0x238>)
 8000cfa:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8000cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8000ebc <HAL_RCC_DeInit+0x23c>)
 8000cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8000eb8 <HAL_RCC_DeInit+0x238>)
 8000d00:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d02:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec0 <HAL_RCC_DeInit+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdce 	bl	80008a8 <HAL_InitTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0c5      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000d16:	f7ff fe11 	bl	800093c <HAL_GetTick>
 8000d1a:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8000d1c:	e00a      	b.n	8000d34 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1e:	f7ff fe0d 	bl	800093c <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e0b6      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8000d34:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1ee      	bne.n	8000d1e <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000d40:	f7ff fdfc 	bl	800093c <HAL_GetTick>
 8000d44:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8000d46:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4959      	ldr	r1, [pc, #356]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <HAL_RCC_DeInit+0x244>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fdf2 	bl	800093c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e09d      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d66:	4b52      	ldr	r3, [pc, #328]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000d72:	f7ff fde3 	bl	800093c <HAL_GetTick>
 8000d76:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000d78:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d82:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d86:	f7ff fdd9 	bl	800093c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e084      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8000d98:	4b45      	ldr	r3, [pc, #276]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f0      	bne.n	8000d86 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000da4:	f7ff fdca 	bl	800093c <HAL_GetTick>
 8000da8:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8000daa:	4b41      	ldr	r3, [pc, #260]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a40      	ldr	r2, [pc, #256]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000db4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fdc0 	bl	800093c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e06b      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8000dca:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000dd6:	f7ff fdb1 	bl	800093c <HAL_GetTick>
 8000dda:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8000ddc:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a33      	ldr	r2, [pc, #204]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dea:	f7ff fda7 	bl	800093c <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e052      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f0      	bne.n	8000dea <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec8 <HAL_RCC_DeInit+0x248>)
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8000e20:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e22:	4a2a      	ldr	r2, [pc, #168]	@ (8000ecc <HAL_RCC_DeInit+0x24c>)
 8000e24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8000e26:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e28:	4a29      	ldr	r2, [pc, #164]	@ (8000ed0 <HAL_RCC_DeInit+0x250>)
 8000e2a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8000e2c:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <HAL_RCC_DeInit+0x250>)
 8000e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e40:	4a23      	ldr	r2, [pc, #140]	@ (8000ed0 <HAL_RCC_DeInit+0x250>)
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e62:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000e6a:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <HAL_RCC_DeInit+0x230>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00f      	beq.n	8000ea0 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 030f 	bic.w	r3, r3, #15
 8000e88:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000e8a:	f043 0307 	orr.w	r3, r3, #7
 8000e8e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_RCC_DeInit+0x22c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	52002000 	.word	0x52002000
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	24000000 	.word	0x24000000
 8000eb8:	03d09000 	.word	0x03d09000
 8000ebc:	24000004 	.word	0x24000004
 8000ec0:	24000008 	.word	0x24000008
 8000ec4:	fff6ed45 	.word	0xfff6ed45
 8000ec8:	02020200 	.word	0x02020200
 8000ecc:	01ff0000 	.word	0x01ff0000
 8000ed0:	01010280 	.word	0x01010280

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e3c8      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8087 	beq.w	8001002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef4:	4b88      	ldr	r3, [pc, #544]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000efe:	4b86      	ldr	r3, [pc, #536]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f06:	2b10      	cmp	r3, #16
 8000f08:	d007      	beq.n	8000f1a <HAL_RCC_OscConfig+0x46>
 8000f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0c:	2b18      	cmp	r3, #24
 8000f0e:	d110      	bne.n	8000f32 <HAL_RCC_OscConfig+0x5e>
 8000f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d10b      	bne.n	8000f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d06c      	beq.n	8001000 <HAL_RCC_OscConfig+0x12c>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d168      	bne.n	8001000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e3a2      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x76>
 8000f3c:	4b76      	ldr	r3, [pc, #472]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a75      	ldr	r2, [pc, #468]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e02e      	b.n	8000fa8 <HAL_RCC_OscConfig+0xd4>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x98>
 8000f52:	4b71      	ldr	r3, [pc, #452]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a70      	ldr	r2, [pc, #448]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a6d      	ldr	r2, [pc, #436]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e01d      	b.n	8000fa8 <HAL_RCC_OscConfig+0xd4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0xbc>
 8000f76:	4b68      	ldr	r3, [pc, #416]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a67      	ldr	r2, [pc, #412]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b65      	ldr	r3, [pc, #404]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a64      	ldr	r2, [pc, #400]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0xd4>
 8000f90:	4b61      	ldr	r3, [pc, #388]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a60      	ldr	r2, [pc, #384]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcc4 	bl	800093c <HAL_GetTick>
 8000fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fcc0 	bl	800093c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	@ 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e356      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fca:	4b53      	ldr	r3, [pc, #332]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0xe4>
 8000fd6:	e014      	b.n	8001002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fcb0 	bl	800093c <HAL_GetTick>
 8000fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fcac 	bl	800093c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	@ 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e342      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff2:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x10c>
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 808c 	beq.w	8001128 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001018:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800101a:	4b3f      	ldr	r3, [pc, #252]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_RCC_OscConfig+0x162>
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	2b18      	cmp	r3, #24
 800102a:	d137      	bne.n	800109c <HAL_RCC_OscConfig+0x1c8>
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d132      	bne.n	800109c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x17a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e314      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 0219 	bic.w	r2, r3, #25
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	492f      	ldr	r1, [pc, #188]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fc6c 	bl	800093c <HAL_GetTick>
 8001064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001068:	f7ff fc68 	bl	800093c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e2fe      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	4920      	ldr	r1, [pc, #128]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109a:	e045      	b.n	8001128 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d026      	beq.n	80010f2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 0219 	bic.w	r2, r3, #25
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4919      	ldr	r1, [pc, #100]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc41 	bl	800093c <HAL_GetTick>
 80010ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc3d 	bl	800093c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e2d3      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	061b      	lsls	r3, r3, #24
 80010ea:	490b      	ldr	r1, [pc, #44]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	e01a      	b.n	8001128 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_RCC_OscConfig+0x244>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc1d 	bl	800093c <HAL_GetTick>
 8001102:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fc19 	bl	800093c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e2af      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
 8001118:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800111c:	4b96      	ldr	r3, [pc, #600]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ee      	bne.n	8001106 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b00      	cmp	r3, #0
 8001132:	d06a      	beq.n	800120a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001134:	4b90      	ldr	r3, [pc, #576]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800113c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800113e:	4b8e      	ldr	r3, [pc, #568]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2b08      	cmp	r3, #8
 8001148:	d007      	beq.n	800115a <HAL_RCC_OscConfig+0x286>
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b18      	cmp	r3, #24
 800114e:	d11b      	bne.n	8001188 <HAL_RCC_OscConfig+0x2b4>
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800115a:	4b87      	ldr	r3, [pc, #540]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x29e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	2b80      	cmp	r3, #128	@ 0x80
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e282      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001172:	4b81      	ldr	r3, [pc, #516]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	497d      	ldr	r1, [pc, #500]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001186:	e040      	b.n	800120a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d023      	beq.n	80011d8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001190:	4b79      	ldr	r3, [pc, #484]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a78      	ldr	r2, [pc, #480]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fbce 	bl	800093c <HAL_GetTick>
 80011a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011a4:	f7ff fbca 	bl	800093c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e260      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011b6:	4b70      	ldr	r3, [pc, #448]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	4969      	ldr	r1, [pc, #420]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
 80011d6:	e018      	b.n	800120a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011d8:	4b67      	ldr	r3, [pc, #412]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a66      	ldr	r2, [pc, #408]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80011de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fbaa 	bl	800093c <HAL_GetTick>
 80011e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011ec:	f7ff fba6 	bl	800093c <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e23c      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d036      	beq.n	8001284 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b56      	ldr	r3, [pc, #344]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001222:	4a55      	ldr	r2, [pc, #340]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff fb87 	bl	800093c <HAL_GetTick>
 800122e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff fb83 	bl	800093c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e219      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001244:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x35e>
 8001250:	e018      	b.n	8001284 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001256:	4a48      	ldr	r2, [pc, #288]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fb6d 	bl	800093c <HAL_GetTick>
 8001262:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fb69 	bl	800093c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1ff      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001278:	4b3f      	ldr	r3, [pc, #252]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800127a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d036      	beq.n	80012fe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d019      	beq.n	80012cc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001298:	4b37      	ldr	r3, [pc, #220]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a36      	ldr	r2, [pc, #216]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb4a 	bl	800093c <HAL_GetTick>
 80012a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ac:	f7ff fb46 	bl	800093c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1dc      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012be:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x3d8>
 80012ca:	e018      	b.n	80012fe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80012d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb30 	bl	800093c <HAL_GetTick>
 80012dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e0:	f7ff fb2c 	bl	800093c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1c2      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8086 	beq.w	8001418 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <HAL_RCC_OscConfig+0x4a8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <HAL_RCC_OscConfig+0x4a8>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001318:	f7ff fb10 	bl	800093c <HAL_GetTick>
 800131c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001320:	f7ff fb0c 	bl	800093c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1a2      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_RCC_OscConfig+0x4a8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x480>
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	@ 0x70
 8001352:	e032      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d111      	bne.n	8001380 <HAL_RCC_OscConfig+0x4ac>
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001360:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6713      	str	r3, [r2, #112]	@ 0x70
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a02      	ldr	r2, [pc, #8]	@ (8001378 <HAL_RCC_OscConfig+0x4a4>)
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	e021      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
 8001376:	bf00      	nop
 8001378:	58024400 	.word	0x58024400
 800137c:	58024800 	.word	0x58024800
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4ce>
 8001388:	4b83      	ldr	r3, [pc, #524]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138c:	4a82      	ldr	r2, [pc, #520]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	@ 0x70
 8001394:	4b80      	ldr	r3, [pc, #512]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001398:	4a7f      	ldr	r2, [pc, #508]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
 80013a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b2:	4a79      	ldr	r2, [pc, #484]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff fabb 	bl	800093c <HAL_GetTick>
 80013c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fab7 	bl	800093c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e14b      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x4f6>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff faa5 	bl	800093c <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff faa1 	bl	800093c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e135      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 812a 	beq.w	8001676 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800142a:	2b18      	cmp	r3, #24
 800142c:	f000 80ba 	beq.w	80015a4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	2b02      	cmp	r3, #2
 8001436:	f040 8095 	bne.w	8001564 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b57      	ldr	r3, [pc, #348]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a56      	ldr	r2, [pc, #344]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fa79 	bl	800093c <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fa75 	bl	800093c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e10b      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800146e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001470:	4b4a      	ldr	r3, [pc, #296]	@ (800159c <HAL_RCC_OscConfig+0x6c8>)
 8001472:	4013      	ands	r3, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	430a      	orrs	r2, r1
 8001480:	4945      	ldr	r1, [pc, #276]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	628b      	str	r3, [r1, #40]	@ 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	3b01      	subs	r3, #1
 800148c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001494:	3b01      	subs	r3, #1
 8001496:	025b      	lsls	r3, r3, #9
 8001498:	b29b      	uxth	r3, r3
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ae:	3b01      	subs	r3, #1
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80014b6:	4938      	ldr	r1, [pc, #224]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80014bc:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c0:	4a35      	ldr	r2, [pc, #212]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014c8:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014cc:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_RCC_OscConfig+0x6cc>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	4930      	ldr	r1, [pc, #192]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e0:	f023 020c 	bic.w	r2, r3, #12
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	492b      	ldr	r1, [pc, #172]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	f023 0202 	bic.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4927      	ldr	r1, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	4a24      	ldr	r2, [pc, #144]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800150e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001510:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151c:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800151e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001524:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff f9fe 	bl	800093c <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f9fa 	bl	800093c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e090      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x670>
 8001562:	e088      	b.n	8001676 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff f9e4 	bl	800093c <HAL_GetTick>
 8001574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff f9e0 	bl	800093c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e076      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800158a:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_RCC_OscConfig+0x6c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x6a4>
 8001596:	e06e      	b.n	8001676 <HAL_RCC_OscConfig+0x7a2>
 8001598:	58024400 	.word	0x58024400
 800159c:	fffffc0c 	.word	0xfffffc0c
 80015a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d031      	beq.n	800161c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0203 	and.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d12a      	bne.n	800161c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d122      	bne.n	800161c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d11a      	bne.n	800161c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0a5b      	lsrs	r3, r3, #9
 80015ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d111      	bne.n	800161c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d108      	bne.n	800161c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	0e1b      	lsrs	r3, r3, #24
 800160e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001616:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e02b      	b.n	8001678 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800162a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	429a      	cmp	r2, r3
 8001634:	d01f      	beq.n	8001676 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001642:	f7ff f97b 	bl	800093c <HAL_GetTick>
 8001646:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001648:	bf00      	nop
 800164a:	f7ff f977 	bl	800093c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	4293      	cmp	r3, r2
 8001654:	d0f9      	beq.n	800164a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 8001658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_RCC_OscConfig+0x7b0>)
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001662:	00d2      	lsls	r2, r2, #3
 8001664:	4906      	ldr	r1, [pc, #24]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 8001666:	4313      	orrs	r3, r2
 8001668:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_RCC_OscConfig+0x7ac>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3730      	adds	r7, #48	@ 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	ffff0007 	.word	0xffff0007

08001688 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e19c      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b8a      	ldr	r3, [pc, #552]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d910      	bls.n	80016cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b87      	ldr	r3, [pc, #540]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 020f 	bic.w	r2, r3, #15
 80016b2:	4985      	ldr	r1, [pc, #532]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b83      	ldr	r3, [pc, #524]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e184      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d908      	bls.n	80016fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016e8:	4b78      	ldr	r3, [pc, #480]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4975      	ldr	r1, [pc, #468]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d010      	beq.n	8001728 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	4b70      	ldr	r3, [pc, #448]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001712:	429a      	cmp	r2, r3
 8001714:	d908      	bls.n	8001728 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001716:	4b6d      	ldr	r3, [pc, #436]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	496a      	ldr	r1, [pc, #424]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001724:	4313      	orrs	r3, r2
 8001726:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	4b64      	ldr	r3, [pc, #400]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001740:	429a      	cmp	r2, r3
 8001742:	d908      	bls.n	8001756 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001744:	4b61      	ldr	r3, [pc, #388]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	495e      	ldr	r1, [pc, #376]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001752:	4313      	orrs	r3, r2
 8001754:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	d010      	beq.n	8001784 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800176e:	429a      	cmp	r2, r3
 8001770:	d908      	bls.n	8001784 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001772:	4b56      	ldr	r3, [pc, #344]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4953      	ldr	r1, [pc, #332]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001780:	4313      	orrs	r3, r2
 8001782:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d010      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b4d      	ldr	r3, [pc, #308]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	429a      	cmp	r2, r3
 800179e:	d908      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f023 020f 	bic.w	r2, r3, #15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4947      	ldr	r1, [pc, #284]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d055      	beq.n	800186a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017be:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4940      	ldr	r1, [pc, #256]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d8:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0f6      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f0:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d115      	bne.n	8001828 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0ea      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0de      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001818:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d6      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f023 0207 	bic.w	r2, r3, #7
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4925      	ldr	r1, [pc, #148]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001836:	4313      	orrs	r3, r2
 8001838:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800183a:	f7ff f87f 	bl	800093c <HAL_GetTick>
 800183e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001840:	e00a      	b.n	8001858 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f87b 	bl	800093c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0be      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	429a      	cmp	r2, r3
 8001868:	d1eb      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	429a      	cmp	r2, r3
 8001884:	d208      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	490e      	ldr	r1, [pc, #56]	@ (80018cc <HAL_RCC_ClockConfig+0x244>)
 8001894:	4313      	orrs	r3, r2
 8001896:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d214      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 020f 	bic.w	r2, r3, #15
 80018ae:	4906      	ldr	r1, [pc, #24]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <HAL_RCC_ClockConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e086      	b.n	80019d6 <HAL_RCC_ClockConfig+0x34e>
 80018c8:	52002000 	.word	0x52002000
 80018cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d208      	bcs.n	80018fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018ec:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4939      	ldr	r1, [pc, #228]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	4b34      	ldr	r3, [pc, #208]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001916:	429a      	cmp	r2, r3
 8001918:	d208      	bcs.n	800192c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800191a:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	492e      	ldr	r1, [pc, #184]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001928:	4313      	orrs	r3, r2
 800192a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001944:	429a      	cmp	r2, r3
 8001946:	d208      	bcs.n	800195a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4922      	ldr	r1, [pc, #136]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001956:	4313      	orrs	r3, r2
 8001958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001972:	429a      	cmp	r2, r3
 8001974:	d208      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4917      	ldr	r1, [pc, #92]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001984:	4313      	orrs	r3, r2
 8001986:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001988:	f000 f834 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	4912      	ldr	r1, [pc, #72]	@ (80019e4 <HAL_RCC_ClockConfig+0x35c>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <HAL_RCC_ClockConfig+0x358>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <HAL_RCC_ClockConfig+0x35c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_RCC_ClockConfig+0x360>)
 80019be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_RCC_ClockConfig+0x364>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x368>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe ff6c 	bl	80008a8 <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58024400 	.word	0x58024400
 80019e4:	08001d58 	.word	0x08001d58
 80019e8:	24000004 	.word	0x24000004
 80019ec:	24000000 	.word	0x24000000
 80019f0:	24000008 	.word	0x24000008

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fa:	4bb3      	ldr	r3, [pc, #716]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a02:	2b18      	cmp	r3, #24
 8001a04:	f200 8155 	bhi.w	8001cb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a08:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	08001a75 	.word	0x08001a75
 8001a14:	08001cb3 	.word	0x08001cb3
 8001a18:	08001cb3 	.word	0x08001cb3
 8001a1c:	08001cb3 	.word	0x08001cb3
 8001a20:	08001cb3 	.word	0x08001cb3
 8001a24:	08001cb3 	.word	0x08001cb3
 8001a28:	08001cb3 	.word	0x08001cb3
 8001a2c:	08001cb3 	.word	0x08001cb3
 8001a30:	08001a9b 	.word	0x08001a9b
 8001a34:	08001cb3 	.word	0x08001cb3
 8001a38:	08001cb3 	.word	0x08001cb3
 8001a3c:	08001cb3 	.word	0x08001cb3
 8001a40:	08001cb3 	.word	0x08001cb3
 8001a44:	08001cb3 	.word	0x08001cb3
 8001a48:	08001cb3 	.word	0x08001cb3
 8001a4c:	08001cb3 	.word	0x08001cb3
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001cb3 	.word	0x08001cb3
 8001a58:	08001cb3 	.word	0x08001cb3
 8001a5c:	08001cb3 	.word	0x08001cb3
 8001a60:	08001cb3 	.word	0x08001cb3
 8001a64:	08001cb3 	.word	0x08001cb3
 8001a68:	08001cb3 	.word	0x08001cb3
 8001a6c:	08001cb3 	.word	0x08001cb3
 8001a70:	08001aa7 	.word	0x08001aa7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a74:	4b94      	ldr	r3, [pc, #592]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a80:	4b91      	ldr	r3, [pc, #580]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	4a90      	ldr	r2, [pc, #576]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001a92:	e111      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a94:	4b8d      	ldr	r3, [pc, #564]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a96:	61bb      	str	r3, [r7, #24]
      break;
 8001a98:	e10e      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a9c:	61bb      	str	r3, [r7, #24]
      break;
 8001a9e:	e10b      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001aa2:	61bb      	str	r3, [r7, #24]
      break;
 8001aa4:	e108      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aa6:	4b88      	ldr	r3, [pc, #544]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ab0:	4b85      	ldr	r3, [pc, #532]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001abc:	4b82      	ldr	r3, [pc, #520]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ac6:	4b80      	ldr	r3, [pc, #512]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aca:	08db      	lsrs	r3, r3, #3
 8001acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80e1 	beq.w	8001cac <HAL_RCC_GetSysClockFreq+0x2b8>
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	f000 8083 	beq.w	8001bf8 <HAL_RCC_GetSysClockFreq+0x204>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	f200 80a1 	bhi.w	8001c3c <HAL_RCC_GetSysClockFreq+0x248>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x114>
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d056      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b06:	e099      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b08:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d02d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b14:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b3e:	4b62      	ldr	r3, [pc, #392]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001b6e:	e087      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001cdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b82:	4b51      	ldr	r3, [pc, #324]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bb2:	e065      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc6:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bda:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bf6:	e043      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001ce4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c3a:	e021      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	0a5b      	lsrs	r3, r3, #9
 8001c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	ee17 3a90 	vmov	r3, s15
 8001ca8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cb4:	61bb      	str	r3, [r7, #24]
      break;
 8001cb6:	bf00      	nop
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	03d09000 	.word	0x03d09000
 8001cd0:	003d0900 	.word	0x003d0900
 8001cd4:	017d7840 	.word	0x017d7840
 8001cd8:	46000000 	.word	0x46000000
 8001cdc:	4c742400 	.word	0x4c742400
 8001ce0:	4a742400 	.word	0x4a742400
 8001ce4:	4bbebc20 	.word	0x4bbebc20

08001ce8 <memset>:
 8001ce8:	4402      	add	r2, r0
 8001cea:	4603      	mov	r3, r0
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <memset+0xa>
 8001cf0:	4770      	bx	lr
 8001cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8001cf6:	e7f9      	b.n	8001cec <memset+0x4>

08001cf8 <__libc_init_array>:
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8001d30 <__libc_init_array+0x38>)
 8001cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8001d34 <__libc_init_array+0x3c>)
 8001cfe:	1b64      	subs	r4, r4, r5
 8001d00:	10a4      	asrs	r4, r4, #2
 8001d02:	2600      	movs	r6, #0
 8001d04:	42a6      	cmp	r6, r4
 8001d06:	d109      	bne.n	8001d1c <__libc_init_array+0x24>
 8001d08:	4d0b      	ldr	r5, [pc, #44]	@ (8001d38 <__libc_init_array+0x40>)
 8001d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8001d3c <__libc_init_array+0x44>)
 8001d0c:	f000 f818 	bl	8001d40 <_init>
 8001d10:	1b64      	subs	r4, r4, r5
 8001d12:	10a4      	asrs	r4, r4, #2
 8001d14:	2600      	movs	r6, #0
 8001d16:	42a6      	cmp	r6, r4
 8001d18:	d105      	bne.n	8001d26 <__libc_init_array+0x2e>
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d20:	4798      	blx	r3
 8001d22:	3601      	adds	r6, #1
 8001d24:	e7ee      	b.n	8001d04 <__libc_init_array+0xc>
 8001d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2a:	4798      	blx	r3
 8001d2c:	3601      	adds	r6, #1
 8001d2e:	e7f2      	b.n	8001d16 <__libc_init_array+0x1e>
 8001d30:	08001d68 	.word	0x08001d68
 8001d34:	08001d68 	.word	0x08001d68
 8001d38:	08001d68 	.word	0x08001d68
 8001d3c:	08001d6c 	.word	0x08001d6c

08001d40 <_init>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr

08001d4c <_fini>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	bf00      	nop
 8001d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d52:	bc08      	pop	{r3}
 8001d54:	469e      	mov	lr, r3
 8001d56:	4770      	bx	lr
