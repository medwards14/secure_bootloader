
secure_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006e6c  08006e6c  00007e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006f44  08006f44  00007f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006f48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08006f58  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08006f58  000080c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_line   00010921  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 0000008f  00000000  00000000  0001895f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0001065a  00000000  00000000  000189ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002029  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00140921  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086a  00000000  00000000  0016c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000317a0  00000000  00000000  0016cd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0019e4ab  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002ccc  00000000  00000000  0019e4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006e54 	.word	0x08006e54

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08006e54 	.word	0x08006e54

0800030c <jump_to_application>:
.global jump_to_application
.type   jump_to_application, %function

jump_to_application:

    cpsid i
 800030c:	b672      	cpsid	i
    LDR   R0, =0x08020000
 800030e:	4802      	ldr	r0, [pc, #8]	@ (8000318 <jump_to_application+0xc>)
    LDR   R1, [R0, #0]
 8000310:	6801      	ldr	r1, [r0, #0]
    MOV   SP, R1
 8000312:	468d      	mov	sp, r1
    LDR   R1, [R0, #4]
 8000314:	6841      	ldr	r1, [r0, #4]
    BX    R1
 8000316:	4708      	bx	r1
    LDR   R0, =0x08020000
 8000318:	08020000 	.word	0x08020000

0800031c <strlen>:
 800031c:	4603      	mov	r3, r0
 800031e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000322:	2a00      	cmp	r2, #0
 8000324:	d1fb      	bne.n	800031e <strlen+0x2>
 8000326:	1a18      	subs	r0, r3, r0
 8000328:	3801      	subs	r0, #1
 800032a:	4770      	bx	lr

0800032c <__aeabi_uldivmod>:
 800032c:	b953      	cbnz	r3, 8000344 <__aeabi_uldivmod+0x18>
 800032e:	b94a      	cbnz	r2, 8000344 <__aeabi_uldivmod+0x18>
 8000330:	2900      	cmp	r1, #0
 8000332:	bf08      	it	eq
 8000334:	2800      	cmpeq	r0, #0
 8000336:	bf1c      	itt	ne
 8000338:	f04f 31ff 	movne.w	r1, #4294967295
 800033c:	f04f 30ff 	movne.w	r0, #4294967295
 8000340:	f000 b96a 	b.w	8000618 <__aeabi_idiv0>
 8000344:	f1ad 0c08 	sub.w	ip, sp, #8
 8000348:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800034c:	f000 f806 	bl	800035c <__udivmoddi4>
 8000350:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000358:	b004      	add	sp, #16
 800035a:	4770      	bx	lr

0800035c <__udivmoddi4>:
 800035c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000360:	9d08      	ldr	r5, [sp, #32]
 8000362:	460c      	mov	r4, r1
 8000364:	2b00      	cmp	r3, #0
 8000366:	d14e      	bne.n	8000406 <__udivmoddi4+0xaa>
 8000368:	4694      	mov	ip, r2
 800036a:	458c      	cmp	ip, r1
 800036c:	4686      	mov	lr, r0
 800036e:	fab2 f282 	clz	r2, r2
 8000372:	d962      	bls.n	800043a <__udivmoddi4+0xde>
 8000374:	b14a      	cbz	r2, 800038a <__udivmoddi4+0x2e>
 8000376:	f1c2 0320 	rsb	r3, r2, #32
 800037a:	4091      	lsls	r1, r2
 800037c:	fa20 f303 	lsr.w	r3, r0, r3
 8000380:	fa0c fc02 	lsl.w	ip, ip, r2
 8000384:	4319      	orrs	r1, r3
 8000386:	fa00 fe02 	lsl.w	lr, r0, r2
 800038a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038e:	fa1f f68c 	uxth.w	r6, ip
 8000392:	fbb1 f4f7 	udiv	r4, r1, r7
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb07 1114 	mls	r1, r7, r4, r1
 800039e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a2:	fb04 f106 	mul.w	r1, r4, r6
 80003a6:	4299      	cmp	r1, r3
 80003a8:	d90a      	bls.n	80003c0 <__udivmoddi4+0x64>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80003b2:	f080 8112 	bcs.w	80005da <__udivmoddi4+0x27e>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 810f 	bls.w	80005da <__udivmoddi4+0x27e>
 80003bc:	3c02      	subs	r4, #2
 80003be:	4463      	add	r3, ip
 80003c0:	1a59      	subs	r1, r3, r1
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ca:	fb07 1110 	mls	r1, r7, r0, r1
 80003ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d2:	fb00 f606 	mul.w	r6, r0, r6
 80003d6:	429e      	cmp	r6, r3
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x94>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e2:	f080 80fc 	bcs.w	80005de <__udivmoddi4+0x282>
 80003e6:	429e      	cmp	r6, r3
 80003e8:	f240 80f9 	bls.w	80005de <__udivmoddi4+0x282>
 80003ec:	4463      	add	r3, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	1b9b      	subs	r3, r3, r6
 80003f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11d      	cbz	r5, 8000402 <__udivmoddi4+0xa6>
 80003fa:	40d3      	lsrs	r3, r2
 80003fc:	2200      	movs	r2, #0
 80003fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d905      	bls.n	8000416 <__udivmoddi4+0xba>
 800040a:	b10d      	cbz	r5, 8000410 <__udivmoddi4+0xb4>
 800040c:	e9c5 0100 	strd	r0, r1, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	4608      	mov	r0, r1
 8000414:	e7f5      	b.n	8000402 <__udivmoddi4+0xa6>
 8000416:	fab3 f183 	clz	r1, r3
 800041a:	2900      	cmp	r1, #0
 800041c:	d146      	bne.n	80004ac <__udivmoddi4+0x150>
 800041e:	42a3      	cmp	r3, r4
 8000420:	d302      	bcc.n	8000428 <__udivmoddi4+0xcc>
 8000422:	4290      	cmp	r0, r2
 8000424:	f0c0 80f0 	bcc.w	8000608 <__udivmoddi4+0x2ac>
 8000428:	1a86      	subs	r6, r0, r2
 800042a:	eb64 0303 	sbc.w	r3, r4, r3
 800042e:	2001      	movs	r0, #1
 8000430:	2d00      	cmp	r5, #0
 8000432:	d0e6      	beq.n	8000402 <__udivmoddi4+0xa6>
 8000434:	e9c5 6300 	strd	r6, r3, [r5]
 8000438:	e7e3      	b.n	8000402 <__udivmoddi4+0xa6>
 800043a:	2a00      	cmp	r2, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x204>
 8000440:	eba1 040c 	sub.w	r4, r1, ip
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	2101      	movs	r1, #1
 800044e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000452:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000456:	fb08 4416 	mls	r4, r8, r6, r4
 800045a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800045e:	fb07 f006 	mul.w	r0, r7, r6
 8000462:	4298      	cmp	r0, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x11c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f106 34ff 	add.w	r4, r6, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x11a>
 8000470:	4298      	cmp	r0, r3
 8000472:	f200 80cd 	bhi.w	8000610 <__udivmoddi4+0x2b4>
 8000476:	4626      	mov	r6, r4
 8000478:	1a1c      	subs	r4, r3, r0
 800047a:	fa1f f38e 	uxth.w	r3, lr
 800047e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000482:	fb08 4410 	mls	r4, r8, r0, r4
 8000486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800048a:	fb00 f707 	mul.w	r7, r0, r7
 800048e:	429f      	cmp	r7, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x148>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 34ff 	add.w	r4, r0, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x146>
 800049c:	429f      	cmp	r7, r3
 800049e:	f200 80b0 	bhi.w	8000602 <__udivmoddi4+0x2a6>
 80004a2:	4620      	mov	r0, r4
 80004a4:	1bdb      	subs	r3, r3, r7
 80004a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004aa:	e7a5      	b.n	80003f8 <__udivmoddi4+0x9c>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa22 f706 	lsr.w	r7, r2, r6
 80004b6:	431f      	orrs	r7, r3
 80004b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004bc:	fa04 f301 	lsl.w	r3, r4, r1
 80004c0:	ea43 030c 	orr.w	r3, r3, ip
 80004c4:	40f4      	lsrs	r4, r6
 80004c6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004d0:	fbb4 fef0 	udiv	lr, r4, r0
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	fb00 441e 	mls	r4, r0, lr, r4
 80004dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004e0:	fb0e f90c 	mul.w	r9, lr, ip
 80004e4:	45a1      	cmp	r9, r4
 80004e6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ea:	d90a      	bls.n	8000502 <__udivmoddi4+0x1a6>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004f2:	f080 8084 	bcs.w	80005fe <__udivmoddi4+0x2a2>
 80004f6:	45a1      	cmp	r9, r4
 80004f8:	f240 8081 	bls.w	80005fe <__udivmoddi4+0x2a2>
 80004fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000500:	443c      	add	r4, r7
 8000502:	eba4 0409 	sub.w	r4, r4, r9
 8000506:	fa1f f983 	uxth.w	r9, r3
 800050a:	fbb4 f3f0 	udiv	r3, r4, r0
 800050e:	fb00 4413 	mls	r4, r0, r3, r4
 8000512:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	45a4      	cmp	ip, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x1d2>
 800051e:	193c      	adds	r4, r7, r4
 8000520:	f103 30ff 	add.w	r0, r3, #4294967295
 8000524:	d267      	bcs.n	80005f6 <__udivmoddi4+0x29a>
 8000526:	45a4      	cmp	ip, r4
 8000528:	d965      	bls.n	80005f6 <__udivmoddi4+0x29a>
 800052a:	3b02      	subs	r3, #2
 800052c:	443c      	add	r4, r7
 800052e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000532:	fba0 9302 	umull	r9, r3, r0, r2
 8000536:	eba4 040c 	sub.w	r4, r4, ip
 800053a:	429c      	cmp	r4, r3
 800053c:	46ce      	mov	lr, r9
 800053e:	469c      	mov	ip, r3
 8000540:	d351      	bcc.n	80005e6 <__udivmoddi4+0x28a>
 8000542:	d04e      	beq.n	80005e2 <__udivmoddi4+0x286>
 8000544:	b155      	cbz	r5, 800055c <__udivmoddi4+0x200>
 8000546:	ebb8 030e 	subs.w	r3, r8, lr
 800054a:	eb64 040c 	sbc.w	r4, r4, ip
 800054e:	fa04 f606 	lsl.w	r6, r4, r6
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431e      	orrs	r6, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	e9c5 6400 	strd	r6, r4, [r5]
 800055c:	2100      	movs	r1, #0
 800055e:	e750      	b.n	8000402 <__udivmoddi4+0xa6>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f103 	lsr.w	r1, r0, r3
 8000568:	fa0c fc02 	lsl.w	ip, ip, r2
 800056c:	fa24 f303 	lsr.w	r3, r4, r3
 8000570:	4094      	lsls	r4, r2
 8000572:	430c      	orrs	r4, r1
 8000574:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000578:	fa00 fe02 	lsl.w	lr, r0, r2
 800057c:	fa1f f78c 	uxth.w	r7, ip
 8000580:	fbb3 f0f8 	udiv	r0, r3, r8
 8000584:	fb08 3110 	mls	r1, r8, r0, r3
 8000588:	0c23      	lsrs	r3, r4, #16
 800058a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058e:	fb00 f107 	mul.w	r1, r0, r7
 8000592:	4299      	cmp	r1, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x24c>
 8000596:	eb1c 0303 	adds.w	r3, ip, r3
 800059a:	f100 36ff 	add.w	r6, r0, #4294967295
 800059e:	d22c      	bcs.n	80005fa <__udivmoddi4+0x29e>
 80005a0:	4299      	cmp	r1, r3
 80005a2:	d92a      	bls.n	80005fa <__udivmoddi4+0x29e>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	1a5b      	subs	r3, r3, r1
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80005b0:	fb08 3311 	mls	r3, r8, r1, r3
 80005b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005b8:	fb01 f307 	mul.w	r3, r1, r7
 80005bc:	42a3      	cmp	r3, r4
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x276>
 80005c0:	eb1c 0404 	adds.w	r4, ip, r4
 80005c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005c8:	d213      	bcs.n	80005f2 <__udivmoddi4+0x296>
 80005ca:	42a3      	cmp	r3, r4
 80005cc:	d911      	bls.n	80005f2 <__udivmoddi4+0x296>
 80005ce:	3902      	subs	r1, #2
 80005d0:	4464      	add	r4, ip
 80005d2:	1ae4      	subs	r4, r4, r3
 80005d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005d8:	e739      	b.n	800044e <__udivmoddi4+0xf2>
 80005da:	4604      	mov	r4, r0
 80005dc:	e6f0      	b.n	80003c0 <__udivmoddi4+0x64>
 80005de:	4608      	mov	r0, r1
 80005e0:	e706      	b.n	80003f0 <__udivmoddi4+0x94>
 80005e2:	45c8      	cmp	r8, r9
 80005e4:	d2ae      	bcs.n	8000544 <__udivmoddi4+0x1e8>
 80005e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ee:	3801      	subs	r0, #1
 80005f0:	e7a8      	b.n	8000544 <__udivmoddi4+0x1e8>
 80005f2:	4631      	mov	r1, r6
 80005f4:	e7ed      	b.n	80005d2 <__udivmoddi4+0x276>
 80005f6:	4603      	mov	r3, r0
 80005f8:	e799      	b.n	800052e <__udivmoddi4+0x1d2>
 80005fa:	4630      	mov	r0, r6
 80005fc:	e7d4      	b.n	80005a8 <__udivmoddi4+0x24c>
 80005fe:	46d6      	mov	lr, sl
 8000600:	e77f      	b.n	8000502 <__udivmoddi4+0x1a6>
 8000602:	4463      	add	r3, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e74d      	b.n	80004a4 <__udivmoddi4+0x148>
 8000608:	4606      	mov	r6, r0
 800060a:	4623      	mov	r3, r4
 800060c:	4608      	mov	r0, r1
 800060e:	e70f      	b.n	8000430 <__udivmoddi4+0xd4>
 8000610:	3e02      	subs	r6, #2
 8000612:	4463      	add	r3, ip
 8000614:	e730      	b.n	8000478 <__udivmoddi4+0x11c>
 8000616:	bf00      	nop

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000622:	f000 f98b 	bl	800093c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb79 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f85d 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f905 	bl	800083c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000632:	f000 f8b7 	bl	80007a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* sending UART debug message for bootloader start */
  const char *msg = "bootloader is running\r\n";
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <main+0xb4>)
 8000638:	617b      	str	r3, [r7, #20]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800063a:	6978      	ldr	r0, [r7, #20]
 800063c:	f7ff fe6e 	bl	800031c <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	6979      	ldr	r1, [r7, #20]
 800064a:	4822      	ldr	r0, [pc, #136]	@ (80006d4 <main+0xb8>)
 800064c:	f004 fd67 	bl	800511e <HAL_UART_Transmit>

  /* debug message for deinitialization */
  const char *deinit_msg = "bootloader is de-initializing\r\n";
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <main+0xbc>)
 8000652:	613b      	str	r3, [r7, #16]
  HAL_UART_Transmit(&huart3, (uint8_t*)deinit_msg, strlen(deinit_msg), HAL_MAX_DELAY);
 8000654:	6938      	ldr	r0, [r7, #16]
 8000656:	f7ff fe61 	bl	800031c <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	6939      	ldr	r1, [r7, #16]
 8000664:	481b      	ldr	r0, [pc, #108]	@ (80006d4 <main+0xb8>)
 8000666:	f004 fd5a 	bl	800511e <HAL_UART_Transmit>

  /* proceeding with bootloader functions */
  Bootloader_DeInit();
 800066a:	f000 f901 	bl	8000870 <Bootloader_DeInit>

  /* debug message before jumping to application */
  const char *pre_jump_msg = "preparing to jump to application\r\n";
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <main+0xc0>)
 8000670:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart3, (uint8_t*)pre_jump_msg, strlen(pre_jump_msg), HAL_MAX_DELAY);
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f7ff fe52 	bl	800031c <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <main+0xb8>)
 8000684:	f004 fd4b 	bl	800511e <HAL_UART_Transmit>

  /* small delay to ensure UART transmission completes */
  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f000 fc41 	bl	8000f10 <HAL_Delay>

  /* disabling UART before jump */
  HAL_UART_DeInit(&huart3);
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <main+0xb8>)
 8000690:	f004 fd06 	bl	80050a0 <HAL_UART_DeInit>

  /* debug message before actual jump */
  const char *jump_msg = "jumping to application\r\n";
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <main+0xc4>)
 8000696:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart3, (uint8_t*)jump_msg, strlen(jump_msg), HAL_MAX_DELAY);
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f7ff fe3f 	bl	800031c <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <main+0xb8>)
 80006aa:	f004 fd38 	bl	800511e <HAL_UART_Transmit>

  jump_to_application();
 80006ae:	f7ff fe2d 	bl	800030c <jump_to_application>

  /* If execution continues, jump failed */
  const char *error_msg = "error: failed to jump!\r\n";
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <main+0xc8>)
 80006b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fe30 	bl	800031c <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <main+0xb8>)
 80006c8:	f004 fd29 	bl	800511e <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0xb0>
 80006d0:	08006e6c 	.word	0x08006e6c
 80006d4:	2400002c 	.word	0x2400002c
 80006d8:	08006e84 	.word	0x08006e84
 80006dc:	08006ea4 	.word	0x08006ea4
 80006e0:	08006ec8 	.word	0x08006ec8
 80006e4:	08006ee4 	.word	0x08006ee4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	@ 0x70
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	224c      	movs	r2, #76	@ 0x4c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fb80 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fb7a 	bl	8006dfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000708:	2002      	movs	r0, #2
 800070a:	f001 fded 	bl	80022e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <SystemClock_Config+0xb8>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071a:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <SystemClock_Config+0xb8>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <SystemClock_Config+0xb8>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072e:	bf00      	nop
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <SystemClock_Config+0xb8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800073c:	d1f8      	bne.n	8000730 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000742:	2301      	movs	r3, #1
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000746:	2340      	movs	r3, #64	@ 0x40
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074a:	2300      	movs	r3, #0
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	4618      	mov	r0, r3
 8000754:	f001 ff2c 	bl	80025b0 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800075e:	f000 f919 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	233f      	movs	r3, #63	@ 0x3f
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000776:	2340      	movs	r3, #64	@ 0x40
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f002 faec 	bl	8002d64 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000792:	f000 f8ff 	bl	8000994 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	@ 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_USART3_UART_Init+0x94>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 80007ee:	f004 fc07 	bl	8005000 <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f8cc 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 8000800:	f006 fa32 	bl	8006c68 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 f8c3 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 8000812:	f006 fa67 	bl	8006ce4 <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 f8ba 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_USART3_UART_Init+0x90>)
 8000822:	f006 f9e8 	bl	8006bf6 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f8b2 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2400002c 	.word	0x2400002c
 8000838:	40004800 	.word	0x40004800

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_GPIO_Init+0x30>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	4a08      	ldr	r2, [pc, #32]	@ (800086c <MX_GPIO_Init+0x30>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_GPIO_Init+0x30>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <Bootloader_DeInit>:

/* USER CODE BEGIN 4 */

void Bootloader_DeInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
    SysTick->CTRL = 0;
 8000876:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <Bootloader_DeInit+0xc4>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000882:	f3bf 8f6f 	isb	sy
}
 8000886:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <Bootloader_DeInit+0xc8>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <Bootloader_DeInit+0xc8>)
 800088e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000892:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000894:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <Bootloader_DeInit+0xc8>)
 8000896:	2200      	movs	r2, #0
 8000898:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
}
 80008a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a2:	f3bf 8f6f 	isb	sy
}
 80008a6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008a8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <Bootloader_DeInit+0xc8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
}
 80008b6:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <Bootloader_DeInit+0xc8>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <Bootloader_DeInit+0xc8>)
 80008be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
}
 80008c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <Bootloader_DeInit+0xc8>)
 80008cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008d0:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	0b5b      	lsrs	r3, r3, #13
 80008d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	015a      	lsls	r2, r3, #5
 80008ea:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80008ee:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008f4:	4910      	ldr	r1, [pc, #64]	@ (8000938 <Bootloader_DeInit+0xc8>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ef      	bne.n	80008e6 <Bootloader_DeInit+0x76>
    } while(sets-- != 0U);
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	60ba      	str	r2, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1e5      	bne.n	80008dc <Bootloader_DeInit+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
}
 8000914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000916:	f3bf 8f6f 	isb	sy
}
 800091a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800091c:	bf00      	nop

    /* disabling caches */
    SCB_DisableICache();
    SCB_DisableDCache();

    HAL_RCC_DeInit();
 800091e:	f001 fd1d 	bl	800235c <HAL_RCC_DeInit>
    HAL_DeInit();
 8000922:	f000 fa37 	bl	8000d94 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8000926:	b672      	cpsid	i
}
 8000928:	bf00      	nop

    /* disabling all interrupts */
    __disable_irq();
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800094e:	f000 fc45 	bl	80011dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000952:	2301      	movs	r3, #1
 8000954:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000956:	2300      	movs	r3, #0
 8000958:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800095e:	231f      	movs	r3, #31
 8000960:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000962:	2387      	movs	r3, #135	@ 0x87
 8000964:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000966:	2300      	movs	r3, #0
 8000968:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800096a:	2300      	movs	r3, #0
 800096c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800096e:	2301      	movs	r3, #1
 8000970:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000972:	2301      	movs	r3, #1
 8000974:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fc63 	bl	800124c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000986:	2004      	movs	r0, #4
 8000988:	f000 fc40 	bl	800120c <HAL_MPU_Enable>

}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_MspInit+0x30>)
 80009a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009ac:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x30>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x30>)
 80009b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	58024400 	.word	0x58024400

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0b8      	sub	sp, #224	@ 0xe0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	22b8      	movs	r2, #184	@ 0xb8
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 fa01 	bl	8006dfc <memset>
  if(huart->Instance==USART3)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a2b      	ldr	r2, [pc, #172]	@ (8000aac <HAL_UART_MspInit+0xd8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d14e      	bne.n	8000aa2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a04:	f04f 0202 	mov.w	r2, #2
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fd2e 	bl	800347c <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a26:	f7ff ffb5 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a30:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a8e:	f001 f981 	bl	8001d94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2027      	movs	r0, #39	@ 0x27
 8000a98:	f000 fb5d 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a9c:	2027      	movs	r0, #39	@ 0x27
 8000a9e:	f000 fb74 	bl	800118a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000aa2:	bf00      	nop
 8000aa4:	37e0      	adds	r7, #224	@ 0xe0
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004800 	.word	0x40004800
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58020c00 	.word	0x58020c00

08000ab8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <HAL_UART_MspDeInit+0x3c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10f      	bne.n	8000aea <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_UART_MspDeInit+0x40>)
 8000acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ad0:	4a09      	ldr	r2, [pc, #36]	@ (8000af8 <HAL_UART_MspDeInit+0x40>)
 8000ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8000ada:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <HAL_UART_MspDeInit+0x44>)
 8000ae0:	f001 fb00 	bl	80020e4 <HAL_GPIO_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000ae4:	2027      	movs	r0, #39	@ 0x27
 8000ae6:	f000 fb5e 	bl	80011a6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004800 	.word	0x40004800
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020c00 	.word	0x58020c00

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f9bb 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <USART3_IRQHandler+0x10>)
 8000b66:	f004 fb69 	bl	800523c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400002c 	.word	0x2400002c

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	4b3e      	ldr	r3, [pc, #248]	@ (8000c74 <SystemInit+0x100>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c74 <SystemInit+0x100>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b88:	4b3b      	ldr	r3, [pc, #236]	@ (8000c78 <SystemInit+0x104>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d807      	bhi.n	8000ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b94:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <SystemInit+0x104>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	4a36      	ldr	r2, [pc, #216]	@ (8000c78 <SystemInit+0x104>)
 8000b9e:	f043 0307 	orr.w	r3, r3, #7
 8000ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba4:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <SystemInit+0x108>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a34      	ldr	r2, [pc, #208]	@ (8000c7c <SystemInit+0x108>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb0:	4b32      	ldr	r3, [pc, #200]	@ (8000c7c <SystemInit+0x108>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bb6:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <SystemInit+0x108>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4930      	ldr	r1, [pc, #192]	@ (8000c7c <SystemInit+0x108>)
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <SystemInit+0x10c>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <SystemInit+0x104>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bce:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <SystemInit+0x104>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 030f 	bic.w	r3, r3, #15
 8000bd6:	4a28      	ldr	r2, [pc, #160]	@ (8000c78 <SystemInit+0x104>)
 8000bd8:	f043 0307 	orr.w	r3, r3, #7
 8000bdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bde:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <SystemInit+0x108>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000be4:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <SystemInit+0x108>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <SystemInit+0x108>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <SystemInit+0x108>)
 8000bf2:	4a24      	ldr	r2, [pc, #144]	@ (8000c84 <SystemInit+0x110>)
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <SystemInit+0x108>)
 8000bf8:	4a23      	ldr	r2, [pc, #140]	@ (8000c88 <SystemInit+0x114>)
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <SystemInit+0x108>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <SystemInit+0x118>)
 8000c00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <SystemInit+0x108>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <SystemInit+0x108>)
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <SystemInit+0x118>)
 8000c0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <SystemInit+0x108>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <SystemInit+0x108>)
 8000c16:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <SystemInit+0x118>)
 8000c18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <SystemInit+0x108>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <SystemInit+0x108>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <SystemInit+0x108>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <SystemInit+0x108>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <SystemInit+0x108>)
 8000c34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d113      	bne.n	8000c68 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <SystemInit+0x108>)
 8000c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c46:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <SystemInit+0x108>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <SystemInit+0x11c>)
 8000c52:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c56:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <SystemInit+0x108>)
 8000c5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <SystemInit+0x108>)
 8000c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	52002000 	.word	0x52002000
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c84:	02020200 	.word	0x02020200
 8000c88:	01ff0000 	.word	0x01ff0000
 8000c8c:	01010280 	.word	0x01010280
 8000c90:	52004000 	.word	0x52004000

08000c94 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ca4:	bf00      	nop
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f9      	beq.n	8000ca6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	58024800 	.word	0x58024800

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cc8:	f7ff ffe4 	bl	8000c94 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff ff52 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f006 f889 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc8f 	bl	800061c <main>
  bx  lr
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	24008000 	.word	0x24008000
  ldr r0, =_sdata
 8000d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d08:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d0c:	08006f48 	.word	0x08006f48
  ldr r2, =_sbss
 8000d10:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d14:	240000c4 	.word	0x240000c4

08000d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC3_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 fa0c 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d28:	f002 f9d2 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_Init+0x68>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	4913      	ldr	r1, [pc, #76]	@ (8000d88 <HAL_Init+0x6c>)
 8000d3a:	5ccb      	ldrb	r3, [r1, r3]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_Init+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_Init+0x6c>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_Init+0x70>)
 8000d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d60:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <HAL_Init+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f87c 	bl	8000e64 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e002      	b.n	8000d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff fe13 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400
 8000d88:	08006f00 	.word	0x08006f00
 8000d8c:	24000004 	.word	0x24000004
 8000d90:	24000000 	.word	0x24000000

08000d94 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8000d98:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000d9a:	4a26      	ldr	r2, [pc, #152]	@ (8000e34 <HAL_DeInit+0xa0>)
 8000d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000d9e:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000da6:	4a24      	ldr	r2, [pc, #144]	@ (8000e38 <HAL_DeInit+0xa4>)
 8000da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000db6:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <HAL_DeInit+0xa8>)
 8000db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_DeInit+0xac>)
 8000dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000de6:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_DeInit+0xb0>)
 8000de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000dec:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <HAL_DeInit+0xb4>)
 8000df8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_DeInit+0xb8>)
 8000e08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000e16:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <HAL_DeInit+0xbc>)
 8000e18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <HAL_DeInit+0x9c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e24:	f000 f816 	bl	8000e54 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	58024400 	.word	0x58024400
 8000e34:	00e95011 	.word	0x00e95011
 8000e38:	02008023 	.word	0x02008023
 8000e3c:	00030271 	.word	0x00030271
 8000e40:	032806ff 	.word	0x032806ff
 8000e44:	eaffc3ff 	.word	0xeaffc3ff
 8000e48:	03000136 	.word	0x03000136
 8000e4c:	405730f3 	.word	0x405730f3
 8000e50:	0420deaa 	.word	0x0420deaa

08000e54 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <HAL_InitTick+0x60>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e021      	b.n	8000ebc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_InitTick+0x64>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_InitTick+0x60>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f997 	bl	80011c2 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f953 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x68>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2400000c 	.word	0x2400000c
 8000ec8:	24000000 	.word	0x24000000
 8000ecc:	24000008 	.word	0x24000008

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2400000c 	.word	0x2400000c
 8000ef4:	240000c0 	.word	0x240000c0

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	240000c0 	.word	0x240000c0

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400000c 	.word	0x2400000c

08000f58 <__NVIC_SetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	05fa0000 	.word	0x05fa0000

08000fa0 <__NVIC_GetPriorityGrouping>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	@ (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_DisableIRQ>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db12      	blt.n	8001030 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	490a      	ldr	r1, [pc, #40]	@ (800103c <__NVIC_DisableIRQ+0x44>)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	3320      	adds	r3, #32
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001024:	f3bf 8f4f 	dsb	sy
}
 8001028:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800102a:	f3bf 8f6f 	isb	sy
}
 800102e:	bf00      	nop
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff05 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff1c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff0f 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff1f 	bl	8000ff8 <__NVIC_DisableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff96 	bl	80010fc <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011e0:	f3bf 8f5f 	dmb	sy
}
 80011e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_MPU_Disable+0x28>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_MPU_Disable+0x28>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_MPU_Disable+0x2c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000ed90 	.word	0xe000ed90

0800120c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <HAL_MPU_Enable+0x38>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_MPU_Enable+0x3c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_MPU_Enable+0x3c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800122a:	f3bf 8f4f 	dsb	sy
}
 800122e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001230:	f3bf 8f6f 	isb	sy
}
 8001234:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed90 	.word	0xe000ed90
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	785a      	ldrb	r2, [r3, #1]
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_MPU_ConfigRegion+0x7c>)
 800125a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_MPU_ConfigRegion+0x7c>)
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <HAL_MPU_ConfigRegion+0x7c>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001268:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_MPU_ConfigRegion+0x7c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7b1b      	ldrb	r3, [r3, #12]
 8001274:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7adb      	ldrb	r3, [r3, #11]
 800127a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800127c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a9b      	ldrb	r3, [r3, #10]
 8001282:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001284:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7b5b      	ldrb	r3, [r3, #13]
 800128a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800128c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7b9b      	ldrb	r3, [r3, #14]
 8001292:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7bdb      	ldrb	r3, [r3, #15]
 800129a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800129c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7a5b      	ldrb	r3, [r3, #9]
 80012a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7a1b      	ldrb	r3, [r3, #8]
 80012aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b8:	6113      	str	r3, [r2, #16]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed90 	.word	0xe000ed90

080012cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff fe10 	bl	8000ef8 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e2dc      	b.n	800189e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e2cd      	b.n	800189e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a76      	ldr	r2, [pc, #472]	@ (80014e0 <HAL_DMA_Abort+0x214>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d04a      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a74      	ldr	r2, [pc, #464]	@ (80014e4 <HAL_DMA_Abort+0x218>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d045      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a73      	ldr	r2, [pc, #460]	@ (80014e8 <HAL_DMA_Abort+0x21c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d040      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a71      	ldr	r2, [pc, #452]	@ (80014ec <HAL_DMA_Abort+0x220>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d03b      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a70      	ldr	r2, [pc, #448]	@ (80014f0 <HAL_DMA_Abort+0x224>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d036      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6e      	ldr	r2, [pc, #440]	@ (80014f4 <HAL_DMA_Abort+0x228>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6d      	ldr	r2, [pc, #436]	@ (80014f8 <HAL_DMA_Abort+0x22c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d02c      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6b      	ldr	r2, [pc, #428]	@ (80014fc <HAL_DMA_Abort+0x230>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d027      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6a      	ldr	r2, [pc, #424]	@ (8001500 <HAL_DMA_Abort+0x234>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d022      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	@ (8001504 <HAL_DMA_Abort+0x238>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01d      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a67      	ldr	r2, [pc, #412]	@ (8001508 <HAL_DMA_Abort+0x23c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d018      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a65      	ldr	r2, [pc, #404]	@ (800150c <HAL_DMA_Abort+0x240>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a64      	ldr	r2, [pc, #400]	@ (8001510 <HAL_DMA_Abort+0x244>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00e      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a62      	ldr	r2, [pc, #392]	@ (8001514 <HAL_DMA_Abort+0x248>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d009      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a61      	ldr	r2, [pc, #388]	@ (8001518 <HAL_DMA_Abort+0x24c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d004      	beq.n	80013a2 <HAL_DMA_Abort+0xd6>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5f      	ldr	r2, [pc, #380]	@ (800151c <HAL_DMA_Abort+0x250>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_DMA_Abort+0xda>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_DMA_Abort+0xdc>
 80013a6:	2300      	movs	r3, #0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 021e 	bic.w	r2, r2, #30
 80013ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020e 	bic.w	r2, r2, #14
 80013e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a3c      	ldr	r2, [pc, #240]	@ (80014e0 <HAL_DMA_Abort+0x214>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d072      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a3a      	ldr	r2, [pc, #232]	@ (80014e4 <HAL_DMA_Abort+0x218>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d06d      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a39      	ldr	r2, [pc, #228]	@ (80014e8 <HAL_DMA_Abort+0x21c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d068      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <HAL_DMA_Abort+0x220>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d063      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a36      	ldr	r2, [pc, #216]	@ (80014f0 <HAL_DMA_Abort+0x224>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d05e      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a34      	ldr	r2, [pc, #208]	@ (80014f4 <HAL_DMA_Abort+0x228>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d059      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a33      	ldr	r2, [pc, #204]	@ (80014f8 <HAL_DMA_Abort+0x22c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d054      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a31      	ldr	r2, [pc, #196]	@ (80014fc <HAL_DMA_Abort+0x230>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d04f      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a30      	ldr	r2, [pc, #192]	@ (8001500 <HAL_DMA_Abort+0x234>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04a      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2e      	ldr	r2, [pc, #184]	@ (8001504 <HAL_DMA_Abort+0x238>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d045      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a2d      	ldr	r2, [pc, #180]	@ (8001508 <HAL_DMA_Abort+0x23c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d040      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2b      	ldr	r2, [pc, #172]	@ (800150c <HAL_DMA_Abort+0x240>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d03b      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a2a      	ldr	r2, [pc, #168]	@ (8001510 <HAL_DMA_Abort+0x244>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d036      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <HAL_DMA_Abort+0x248>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d031      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <HAL_DMA_Abort+0x24c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d02c      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a25      	ldr	r2, [pc, #148]	@ (800151c <HAL_DMA_Abort+0x250>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d027      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a24      	ldr	r2, [pc, #144]	@ (8001520 <HAL_DMA_Abort+0x254>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <HAL_DMA_Abort+0x258>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01d      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a21      	ldr	r2, [pc, #132]	@ (8001528 <HAL_DMA_Abort+0x25c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d018      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_DMA_Abort+0x260>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_DMA_Abort+0x264>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00e      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_DMA_Abort+0x268>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d009      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_DMA_Abort+0x26c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d004      	beq.n	80014da <HAL_DMA_Abort+0x20e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_DMA_Abort+0x270>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d132      	bne.n	8001540 <HAL_DMA_Abort+0x274>
 80014da:	2301      	movs	r3, #1
 80014dc:	e031      	b.n	8001542 <HAL_DMA_Abort+0x276>
 80014de:	bf00      	nop
 80014e0:	40020010 	.word	0x40020010
 80014e4:	40020028 	.word	0x40020028
 80014e8:	40020040 	.word	0x40020040
 80014ec:	40020058 	.word	0x40020058
 80014f0:	40020070 	.word	0x40020070
 80014f4:	40020088 	.word	0x40020088
 80014f8:	400200a0 	.word	0x400200a0
 80014fc:	400200b8 	.word	0x400200b8
 8001500:	40020410 	.word	0x40020410
 8001504:	40020428 	.word	0x40020428
 8001508:	40020440 	.word	0x40020440
 800150c:	40020458 	.word	0x40020458
 8001510:	40020470 	.word	0x40020470
 8001514:	40020488 	.word	0x40020488
 8001518:	400204a0 	.word	0x400204a0
 800151c:	400204b8 	.word	0x400204b8
 8001520:	58025408 	.word	0x58025408
 8001524:	5802541c 	.word	0x5802541c
 8001528:	58025430 	.word	0x58025430
 800152c:	58025444 	.word	0x58025444
 8001530:	58025458 	.word	0x58025458
 8001534:	5802546c 	.word	0x5802546c
 8001538:	58025480 	.word	0x58025480
 800153c:	58025494 	.word	0x58025494
 8001540:	2300      	movs	r3, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001554:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6d      	ldr	r2, [pc, #436]	@ (8001710 <HAL_DMA_Abort+0x444>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d04a      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6b      	ldr	r2, [pc, #428]	@ (8001714 <HAL_DMA_Abort+0x448>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d045      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_DMA_Abort+0x44c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d040      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a68      	ldr	r2, [pc, #416]	@ (800171c <HAL_DMA_Abort+0x450>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d03b      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a67      	ldr	r2, [pc, #412]	@ (8001720 <HAL_DMA_Abort+0x454>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d036      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a65      	ldr	r2, [pc, #404]	@ (8001724 <HAL_DMA_Abort+0x458>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d031      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a64      	ldr	r2, [pc, #400]	@ (8001728 <HAL_DMA_Abort+0x45c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d02c      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a62      	ldr	r2, [pc, #392]	@ (800172c <HAL_DMA_Abort+0x460>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d027      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a61      	ldr	r2, [pc, #388]	@ (8001730 <HAL_DMA_Abort+0x464>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001734 <HAL_DMA_Abort+0x468>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5e      	ldr	r2, [pc, #376]	@ (8001738 <HAL_DMA_Abort+0x46c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5c      	ldr	r2, [pc, #368]	@ (800173c <HAL_DMA_Abort+0x470>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001740 <HAL_DMA_Abort+0x474>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00e      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a59      	ldr	r2, [pc, #356]	@ (8001744 <HAL_DMA_Abort+0x478>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d009      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_DMA_Abort+0x47c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d004      	beq.n	80015f6 <HAL_DMA_Abort+0x32a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a56      	ldr	r2, [pc, #344]	@ (800174c <HAL_DMA_Abort+0x480>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d108      	bne.n	8001608 <HAL_DMA_Abort+0x33c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e007      	b.n	8001618 <HAL_DMA_Abort+0x34c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001618:	e013      	b.n	8001642 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161a:	f7ff fc6d 	bl	8000ef8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b05      	cmp	r3, #5
 8001626:	d90c      	bls.n	8001642 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2220      	movs	r2, #32
 800162c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e12d      	b.n	800189e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1e5      	bne.n	800161a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2f      	ldr	r2, [pc, #188]	@ (8001710 <HAL_DMA_Abort+0x444>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04a      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2d      	ldr	r2, [pc, #180]	@ (8001714 <HAL_DMA_Abort+0x448>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d045      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2c      	ldr	r2, [pc, #176]	@ (8001718 <HAL_DMA_Abort+0x44c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d040      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <HAL_DMA_Abort+0x450>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d03b      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a29      	ldr	r2, [pc, #164]	@ (8001720 <HAL_DMA_Abort+0x454>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d036      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <HAL_DMA_Abort+0x458>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d031      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <HAL_DMA_Abort+0x45c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d02c      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a24      	ldr	r2, [pc, #144]	@ (800172c <HAL_DMA_Abort+0x460>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d027      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a23      	ldr	r2, [pc, #140]	@ (8001730 <HAL_DMA_Abort+0x464>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <HAL_DMA_Abort+0x468>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01d      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <HAL_DMA_Abort+0x46c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d018      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <HAL_DMA_Abort+0x470>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <HAL_DMA_Abort+0x474>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00e      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_DMA_Abort+0x478>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d009      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1a      	ldr	r2, [pc, #104]	@ (8001748 <HAL_DMA_Abort+0x47c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d004      	beq.n	80016ee <HAL_DMA_Abort+0x422>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <HAL_DMA_Abort+0x480>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_DMA_Abort+0x426>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_Abort+0x428>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d02b      	beq.n	8001750 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	223f      	movs	r2, #63	@ 0x3f
 8001708:	409a      	lsls	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	e02a      	b.n	8001766 <HAL_DMA_Abort+0x49a>
 8001710:	40020010 	.word	0x40020010
 8001714:	40020028 	.word	0x40020028
 8001718:	40020040 	.word	0x40020040
 800171c:	40020058 	.word	0x40020058
 8001720:	40020070 	.word	0x40020070
 8001724:	40020088 	.word	0x40020088
 8001728:	400200a0 	.word	0x400200a0
 800172c:	400200b8 	.word	0x400200b8
 8001730:	40020410 	.word	0x40020410
 8001734:	40020428 	.word	0x40020428
 8001738:	40020440 	.word	0x40020440
 800173c:	40020458 	.word	0x40020458
 8001740:	40020470 	.word	0x40020470
 8001744:	40020488 	.word	0x40020488
 8001748:	400204a0 	.word	0x400204a0
 800174c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4f      	ldr	r2, [pc, #316]	@ (80018a8 <HAL_DMA_Abort+0x5dc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d072      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a4d      	ldr	r2, [pc, #308]	@ (80018ac <HAL_DMA_Abort+0x5e0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d06d      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_DMA_Abort+0x5e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d068      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <HAL_DMA_Abort+0x5e8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d063      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <HAL_DMA_Abort+0x5ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d05e      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <HAL_DMA_Abort+0x5f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d059      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a46      	ldr	r2, [pc, #280]	@ (80018c0 <HAL_DMA_Abort+0x5f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d054      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a44      	ldr	r2, [pc, #272]	@ (80018c4 <HAL_DMA_Abort+0x5f8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d04f      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a43      	ldr	r2, [pc, #268]	@ (80018c8 <HAL_DMA_Abort+0x5fc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d04a      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a41      	ldr	r2, [pc, #260]	@ (80018cc <HAL_DMA_Abort+0x600>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d045      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a40      	ldr	r2, [pc, #256]	@ (80018d0 <HAL_DMA_Abort+0x604>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d040      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a3e      	ldr	r2, [pc, #248]	@ (80018d4 <HAL_DMA_Abort+0x608>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d03b      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a3d      	ldr	r2, [pc, #244]	@ (80018d8 <HAL_DMA_Abort+0x60c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d036      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a3b      	ldr	r2, [pc, #236]	@ (80018dc <HAL_DMA_Abort+0x610>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d031      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a3a      	ldr	r2, [pc, #232]	@ (80018e0 <HAL_DMA_Abort+0x614>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d02c      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a38      	ldr	r2, [pc, #224]	@ (80018e4 <HAL_DMA_Abort+0x618>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d027      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a37      	ldr	r2, [pc, #220]	@ (80018e8 <HAL_DMA_Abort+0x61c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d022      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a35      	ldr	r2, [pc, #212]	@ (80018ec <HAL_DMA_Abort+0x620>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01d      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a34      	ldr	r2, [pc, #208]	@ (80018f0 <HAL_DMA_Abort+0x624>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d018      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a32      	ldr	r2, [pc, #200]	@ (80018f4 <HAL_DMA_Abort+0x628>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <HAL_DMA_Abort+0x62c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00e      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2f      	ldr	r2, [pc, #188]	@ (80018fc <HAL_DMA_Abort+0x630>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2e      	ldr	r2, [pc, #184]	@ (8001900 <HAL_DMA_Abort+0x634>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_Abort+0x58a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2c      	ldr	r2, [pc, #176]	@ (8001904 <HAL_DMA_Abort+0x638>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_DMA_Abort+0x58e>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_DMA_Abort+0x590>
 800185a:	2300      	movs	r3, #0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d015      	beq.n	800188c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001868:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800187c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001880:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800188a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40020010 	.word	0x40020010
 80018ac:	40020028 	.word	0x40020028
 80018b0:	40020040 	.word	0x40020040
 80018b4:	40020058 	.word	0x40020058
 80018b8:	40020070 	.word	0x40020070
 80018bc:	40020088 	.word	0x40020088
 80018c0:	400200a0 	.word	0x400200a0
 80018c4:	400200b8 	.word	0x400200b8
 80018c8:	40020410 	.word	0x40020410
 80018cc:	40020428 	.word	0x40020428
 80018d0:	40020440 	.word	0x40020440
 80018d4:	40020458 	.word	0x40020458
 80018d8:	40020470 	.word	0x40020470
 80018dc:	40020488 	.word	0x40020488
 80018e0:	400204a0 	.word	0x400204a0
 80018e4:	400204b8 	.word	0x400204b8
 80018e8:	58025408 	.word	0x58025408
 80018ec:	5802541c 	.word	0x5802541c
 80018f0:	58025430 	.word	0x58025430
 80018f4:	58025444 	.word	0x58025444
 80018f8:	58025458 	.word	0x58025458
 80018fc:	5802546c 	.word	0x5802546c
 8001900:	58025480 	.word	0x58025480
 8001904:	58025494 	.word	0x58025494

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e237      	b.n	8001d8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e22c      	b.n	8001d8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d04a      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5b      	ldr	r2, [pc, #364]	@ (8001aac <HAL_DMA_Abort_IT+0x1a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d045      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a59      	ldr	r2, [pc, #356]	@ (8001ab0 <HAL_DMA_Abort_IT+0x1a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d03b      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d036      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <HAL_DMA_Abort_IT+0x1b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d031      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a53      	ldr	r2, [pc, #332]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02c      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1bc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d027      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a50      	ldr	r2, [pc, #320]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a4f      	ldr	r2, [pc, #316]	@ (8001acc <HAL_DMA_Abort_IT+0x1c4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01d      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1c8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d018      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00e      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_DMA_Abort_IT+0x1d4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a46      	ldr	r2, [pc, #280]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Abort_IT+0xcc>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_DMA_Abort_IT+0xce>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8086 	beq.w	8001ae8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2204      	movs	r2, #4
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1a0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d04a      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2e      	ldr	r2, [pc, #184]	@ (8001aac <HAL_DMA_Abort_IT+0x1a4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d045      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab0 <HAL_DMA_Abort_IT+0x1a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d040      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d03b      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d036      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <HAL_DMA_Abort_IT+0x1b4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d031      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02c      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1bc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d027      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d022      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <HAL_DMA_Abort_IT+0x1c4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d01d      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d018      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1d0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00e      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001adc <HAL_DMA_Abort_IT+0x1d4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1d8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1dc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d108      	bne.n	8001a96 <HAL_DMA_Abort_IT+0x18e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e178      	b.n	8001d88 <HAL_DMA_Abort_IT+0x480>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e16f      	b.n	8001d88 <HAL_DMA_Abort_IT+0x480>
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 020e 	bic.w	r2, r2, #14
 8001af6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d04a      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d045      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d040      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a68      	ldr	r2, [pc, #416]	@ (8001cbc <HAL_DMA_Abort_IT+0x3b4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d03b      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a66      	ldr	r2, [pc, #408]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d036      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d031      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a63      	ldr	r2, [pc, #396]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d02c      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a62      	ldr	r2, [pc, #392]	@ (8001ccc <HAL_DMA_Abort_IT+0x3c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d027      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a60      	ldr	r2, [pc, #384]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d022      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d01d      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d018      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_DMA_Abort_IT+0x3d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00e      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_DMA_Abort_IT+0x3e4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <HAL_DMA_Abort_IT+0x2a2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_DMA_Abort_IT+0x2b2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a39      	ldr	r2, [pc, #228]	@ (8001cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a37      	ldr	r2, [pc, #220]	@ (8001cbc <HAL_DMA_Abort_IT+0x3b4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a33      	ldr	r2, [pc, #204]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <HAL_DMA_Abort_IT+0x3c4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_DMA_Abort_IT+0x3d4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_DMA_Abort_IT+0x3e4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3e8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3ec>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3f0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_DMA_Abort_IT+0x3f4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_DMA_Abort_IT+0x3f8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_DMA_Abort_IT+0x3fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_DMA_Abort_IT+0x400>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_DMA_Abort_IT+0x404>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d132      	bne.n	8001d10 <HAL_DMA_Abort_IT+0x408>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e031      	b.n	8001d12 <HAL_DMA_Abort_IT+0x40a>
 8001cae:	bf00      	nop
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
 8001cf0:	58025408 	.word	0x58025408
 8001cf4:	5802541c 	.word	0x5802541c
 8001cf8:	58025430 	.word	0x58025430
 8001cfc:	58025444 	.word	0x58025444
 8001d00:	58025458 	.word	0x58025458
 8001d04:	5802546c 	.word	0x5802546c
 8001d08:	58025480 	.word	0x58025480
 8001d0c:	58025494 	.word	0x58025494
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d028      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	2201      	movs	r2, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001da2:	4b86      	ldr	r3, [pc, #536]	@ (8001fbc <HAL_GPIO_Init+0x228>)
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001da6:	e18c      	b.n	80020c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 817e 	beq.w	80020bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x44>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d017      	beq.n	8001e76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d123      	bne.n	8001eca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	69b9      	ldr	r1, [r7, #24]
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80d8 	beq.w	80020bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <HAL_GPIO_Init+0x22c>)
 8001f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f12:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc0 <HAL_GPIO_Init+0x22c>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <HAL_GPIO_Init+0x22c>)
 8001f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2a:	4a26      	ldr	r2, [pc, #152]	@ (8001fc4 <HAL_GPIO_Init+0x230>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_GPIO_Init+0x234>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04a      	beq.n	8001fec <HAL_GPIO_Init+0x258>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <HAL_GPIO_Init+0x238>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02b      	beq.n	8001fb6 <HAL_GPIO_Init+0x222>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <HAL_GPIO_Init+0x23c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d025      	beq.n	8001fb2 <HAL_GPIO_Init+0x21e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_GPIO_Init+0x240>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01f      	beq.n	8001fae <HAL_GPIO_Init+0x21a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_GPIO_Init+0x244>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_GPIO_Init+0x216>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x248>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0x212>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_GPIO_Init+0x24c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a16      	ldr	r2, [pc, #88]	@ (8001fe4 <HAL_GPIO_Init+0x250>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x20a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a15      	ldr	r2, [pc, #84]	@ (8001fe8 <HAL_GPIO_Init+0x254>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f96:	2309      	movs	r3, #9
 8001f98:	e029      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	e027      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e025      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e023      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e021      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e01f      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e01d      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e01b      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e019      	b.n	8001fee <HAL_GPIO_Init+0x25a>
 8001fba:	bf00      	nop
 8001fbc:	58000080 	.word	0x58000080
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	58000400 	.word	0x58000400
 8001fc8:	58020000 	.word	0x58020000
 8001fcc:	58020400 	.word	0x58020400
 8001fd0:	58020800 	.word	0x58020800
 8001fd4:	58020c00 	.word	0x58020c00
 8001fd8:	58021000 	.word	0x58021000
 8001fdc:	58021400 	.word	0x58021400
 8001fe0:	58021800 	.word	0x58021800
 8001fe4:	58021c00 	.word	0x58021c00
 8001fe8:	58022400 	.word	0x58022400
 8001fec:	2300      	movs	r3, #0
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffe:	4938      	ldr	r1, [pc, #224]	@ (80020e0 <HAL_GPIO_Init+0x34c>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f ae6b 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3724      	adds	r7, #36	@ 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	58000400 	.word	0x58000400

080020e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020f2:	4b72      	ldr	r3, [pc, #456]	@ (80022bc <HAL_GPIO_DeInit+0x1d8>)
 80020f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80020f6:	e0d3      	b.n	80022a0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80020f8:	2201      	movs	r2, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80c6 	beq.w	800229a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a6c      	ldr	r2, [pc, #432]	@ (80022c0 <HAL_GPIO_DeInit+0x1dc>)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a64      	ldr	r2, [pc, #400]	@ (80022c4 <HAL_GPIO_DeInit+0x1e0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d031      	beq.n	800219c <HAL_GPIO_DeInit+0xb8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a63      	ldr	r2, [pc, #396]	@ (80022c8 <HAL_GPIO_DeInit+0x1e4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d02b      	beq.n	8002198 <HAL_GPIO_DeInit+0xb4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a62      	ldr	r2, [pc, #392]	@ (80022cc <HAL_GPIO_DeInit+0x1e8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d025      	beq.n	8002194 <HAL_GPIO_DeInit+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a61      	ldr	r2, [pc, #388]	@ (80022d0 <HAL_GPIO_DeInit+0x1ec>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d01f      	beq.n	8002190 <HAL_GPIO_DeInit+0xac>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a60      	ldr	r2, [pc, #384]	@ (80022d4 <HAL_GPIO_DeInit+0x1f0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d019      	beq.n	800218c <HAL_GPIO_DeInit+0xa8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a5f      	ldr	r2, [pc, #380]	@ (80022d8 <HAL_GPIO_DeInit+0x1f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_GPIO_DeInit+0xa4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a5e      	ldr	r2, [pc, #376]	@ (80022dc <HAL_GPIO_DeInit+0x1f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00d      	beq.n	8002184 <HAL_GPIO_DeInit+0xa0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a5d      	ldr	r2, [pc, #372]	@ (80022e0 <HAL_GPIO_DeInit+0x1fc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <HAL_GPIO_DeInit+0x9c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_GPIO_DeInit+0x200>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_GPIO_DeInit+0x98>
 8002178:	2309      	movs	r3, #9
 800217a:	e010      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 800217c:	230a      	movs	r3, #10
 800217e:	e00e      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002180:	2307      	movs	r3, #7
 8002182:	e00c      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002184:	2306      	movs	r3, #6
 8002186:	e00a      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002188:	2305      	movs	r3, #5
 800218a:	e008      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 800218c:	2304      	movs	r3, #4
 800218e:	e006      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002190:	2303      	movs	r3, #3
 8002192:	e004      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_DeInit+0xba>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d136      	bne.n	800221c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	401a      	ands	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d8:	4013      	ands	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ea:	4013      	ands	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021fe:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <HAL_GPIO_DeInit+0x1dc>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	43da      	mvns	r2, r3
 800220e:	482c      	ldr	r0, [pc, #176]	@ (80022c0 <HAL_GPIO_DeInit+0x1dc>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	400a      	ands	r2, r1
 8002216:	3302      	adds	r3, #2
 8002218:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2103      	movs	r1, #3
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	08d2      	lsrs	r2, r2, #3
 8002250:	4019      	ands	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2103      	movs	r1, #3
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	2101      	movs	r1, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2103      	movs	r1, #3
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	401a      	ands	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f af25 	bne.w	80020f8 <HAL_GPIO_DeInit+0x14>
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	58000080 	.word	0x58000080
 80022c0:	58000400 	.word	0x58000400
 80022c4:	58020000 	.word	0x58020000
 80022c8:	58020400 	.word	0x58020400
 80022cc:	58020800 	.word	0x58020800
 80022d0:	58020c00 	.word	0x58020c00
 80022d4:	58021000 	.word	0x58021000
 80022d8:	58021400 	.word	0x58021400
 80022dc:	58021800 	.word	0x58021800
 80022e0:	58021c00 	.word	0x58021c00
 80022e4:	58022400 	.word	0x58022400

080022e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_PWREx_ConfigSupply+0x70>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d00a      	beq.n	8002312 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022fc:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_PWREx_ConfigSupply+0x70>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e01f      	b.n	800234e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e01d      	b.n	800234e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_PWREx_ConfigSupply+0x70>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	490f      	ldr	r1, [pc, #60]	@ (8002358 <HAL_PWREx_ConfigSupply+0x70>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002322:	f7fe fde9 	bl	8000ef8 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002328:	e009      	b.n	800233e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800232a:	f7fe fde5 	bl	8000ef8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002338:	d901      	bls.n	800233e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e007      	b.n	800234e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_PWREx_ConfigSupply+0x70>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800234a:	d1ee      	bne.n	800232a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	58024800 	.word	0x58024800

0800235c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002362:	4b89      	ldr	r3, [pc, #548]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	2b06      	cmp	r3, #6
 800236c:	d80f      	bhi.n	800238e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800236e:	4b86      	ldr	r3, [pc, #536]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 030f 	bic.w	r3, r3, #15
 8002376:	4a84      	ldr	r2, [pc, #528]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002378:	f043 0307 	orr.w	r3, r3, #7
 800237c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800237e:	4b82      	ldr	r3, [pc, #520]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	2b07      	cmp	r3, #7
 8002388:	d001      	beq.n	800238e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0f7      	b.n	800257e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800238e:	f7fe fdb3 	bl	8000ef8 <HAL_GetTick>
 8002392:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002394:	4b7d      	ldr	r3, [pc, #500]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a7c      	ldr	r2, [pc, #496]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fda9 	bl	8000ef8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0e4      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	4b75      	ldr	r3, [pc, #468]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80023c0:	4b72      	ldr	r3, [pc, #456]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a71      	ldr	r2, [pc, #452]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80023c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80023cc:	4b6f      	ldr	r3, [pc, #444]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80023d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002590 <HAL_RCC_DeInit+0x234>)
 80023d4:	4a6f      	ldr	r2, [pc, #444]	@ (8002594 <HAL_RCC_DeInit+0x238>)
 80023d6:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80023d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002598 <HAL_RCC_DeInit+0x23c>)
 80023da:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_DeInit+0x238>)
 80023dc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023de:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <HAL_RCC_DeInit+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fd3e 	bl	8000e64 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0c5      	b.n	800257e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80023f2:	f7fe fd81 	bl	8000ef8 <HAL_GetTick>
 80023f6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fd7d 	bl	8000ef8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0b6      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002410:	4b5e      	ldr	r3, [pc, #376]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800241c:	f7fe fd6c 	bl	8000ef8 <HAL_GetTick>
 8002420:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002422:	4b5a      	ldr	r3, [pc, #360]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4959      	ldr	r1, [pc, #356]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002428:	4b5d      	ldr	r3, [pc, #372]	@ (80025a0 <HAL_RCC_DeInit+0x244>)
 800242a:	4013      	ands	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fd62 	bl	8000ef8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e09d      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	4b52      	ldr	r3, [pc, #328]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800244e:	f7fe fd53 	bl	8000ef8 <HAL_GetTick>
 8002452:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002454:	4b4d      	ldr	r3, [pc, #308]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fd49 	bl	8000ef8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e084      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002474:	4b45      	ldr	r3, [pc, #276]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002480:	f7fe fd3a 	bl	8000ef8 <HAL_GetTick>
 8002484:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a40      	ldr	r2, [pc, #256]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800248c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002490:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe fd30 	bl	8000ef8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e06b      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024b2:	f7fe fd21 	bl	8000ef8 <HAL_GetTick>
 80024b6:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80024b8:	4b34      	ldr	r3, [pc, #208]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a33      	ldr	r2, [pc, #204]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fd17 	bl	8000ef8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e052      	b.n	800257e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024d8:	4b2c      	ldr	r3, [pc, #176]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80024e4:	4b29      	ldr	r3, [pc, #164]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80024ea:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80024f6:	4b25      	ldr	r3, [pc, #148]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024f8:	4a2a      	ldr	r2, [pc, #168]	@ (80025a4 <HAL_RCC_DeInit+0x248>)
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80024fc:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_RCC_DeInit+0x230>)
 80024fe:	4a2a      	ldr	r2, [pc, #168]	@ (80025a8 <HAL_RCC_DeInit+0x24c>)
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8002502:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002504:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_RCC_DeInit+0x250>)
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800250a:	2200      	movs	r2, #0
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 800250e:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002510:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_RCC_DeInit+0x250>)
 8002512:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002516:	2200      	movs	r2, #0
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 800251a:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800251c:	4a23      	ldr	r2, [pc, #140]	@ (80025ac <HAL_RCC_DeInit+0x250>)
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002526:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a18      	ldr	r2, [pc, #96]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002532:	4b16      	ldr	r3, [pc, #88]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002534:	2200      	movs	r2, #0
 8002536:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_DeInit+0x230>)
 800253a:	f04f 32ff 	mov.w	r2, #4294967295
 800253e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002542:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002546:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_RCC_DeInit+0x230>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002550:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 8002566:	f043 0307 	orr.w	r3, r3, #7
 800256a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_DeInit+0x22c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b07      	cmp	r3, #7
 8002576:	d001      	beq.n	800257c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	52002000 	.word	0x52002000
 800258c:	58024400 	.word	0x58024400
 8002590:	24000000 	.word	0x24000000
 8002594:	03d09000 	.word	0x03d09000
 8002598:	24000004 	.word	0x24000004
 800259c:	24000008 	.word	0x24000008
 80025a0:	fff6ed45 	.word	0xfff6ed45
 80025a4:	02020200 	.word	0x02020200
 80025a8:	01ff0000 	.word	0x01ff0000
 80025ac:	01010280 	.word	0x01010280

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	@ 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e3c8      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8087 	beq.w	80026de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d0:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025da:	4b86      	ldr	r3, [pc, #536]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d007      	beq.n	80025f6 <HAL_RCC_OscConfig+0x46>
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	2b18      	cmp	r3, #24
 80025ea:	d110      	bne.n	800260e <HAL_RCC_OscConfig+0x5e>
 80025ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f6:	4b7f      	ldr	r3, [pc, #508]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d06c      	beq.n	80026dc <HAL_RCC_OscConfig+0x12c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d168      	bne.n	80026dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e3a2      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x76>
 8002618:	4b76      	ldr	r3, [pc, #472]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a75      	ldr	r2, [pc, #468]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e02e      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x98>
 800262e:	4b71      	ldr	r3, [pc, #452]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a70      	ldr	r2, [pc, #448]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6e      	ldr	r3, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6d      	ldr	r2, [pc, #436]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0xbc>
 8002652:	4b68      	ldr	r3, [pc, #416]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a67      	ldr	r2, [pc, #412]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b65      	ldr	r3, [pc, #404]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a64      	ldr	r2, [pc, #400]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 800266c:	4b61      	ldr	r3, [pc, #388]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a60      	ldr	r2, [pc, #384]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b5e      	ldr	r3, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5d      	ldr	r2, [pc, #372]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fc34 	bl	8000ef8 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fc30 	bl	8000ef8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e356      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a6:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xe4>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fc20 	bl	8000ef8 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fc1c 	bl	8000ef8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e342      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ce:	4b49      	ldr	r3, [pc, #292]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x10c>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 808c 	beq.w	8002804 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f6:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_RCC_OscConfig+0x162>
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b18      	cmp	r3, #24
 8002706:	d137      	bne.n	8002778 <HAL_RCC_OscConfig+0x1c8>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d132      	bne.n	8002778 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002712:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x17a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e314      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800272a:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0219 	bic.w	r2, r3, #25
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	492f      	ldr	r1, [pc, #188]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fbdc 	bl	8000ef8 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002744:	f7fe fbd8 	bl	8000ef8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e2fe      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002756:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	061b      	lsls	r3, r3, #24
 8002770:	4920      	ldr	r1, [pc, #128]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	e045      	b.n	8002804 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d026      	beq.n	80027ce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002780:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 0219 	bic.w	r2, r3, #25
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4919      	ldr	r1, [pc, #100]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fbb1 	bl	8000ef8 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe fbad 	bl	8000ef8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e2d3      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	490b      	ldr	r1, [pc, #44]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
 80027cc:	e01a      	b.n	8002804 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fb8d 	bl	8000ef8 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fb89 	bl	8000ef8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d903      	bls.n	80027f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e2af      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
 80027f4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f8:	4b96      	ldr	r3, [pc, #600]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d06a      	beq.n	80028e6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002810:	4b90      	ldr	r3, [pc, #576]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002818:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800281a:	4b8e      	ldr	r3, [pc, #568]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d007      	beq.n	8002836 <HAL_RCC_OscConfig+0x286>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b18      	cmp	r3, #24
 800282a:	d11b      	bne.n	8002864 <HAL_RCC_OscConfig+0x2b4>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d116      	bne.n	8002864 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002836:	4b87      	ldr	r3, [pc, #540]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x29e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b80      	cmp	r3, #128	@ 0x80
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e282      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800284e:	4b81      	ldr	r3, [pc, #516]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	497d      	ldr	r1, [pc, #500]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002862:	e040      	b.n	80028e6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800286c:	4b79      	ldr	r3, [pc, #484]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a78      	ldr	r2, [pc, #480]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fb3e 	bl	8000ef8 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002880:	f7fe fb3a 	bl	8000ef8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e260      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002892:	4b70      	ldr	r3, [pc, #448]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
 80028b2:	e018      	b.n	80028e6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028b4:	4b67      	ldr	r3, [pc, #412]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a66      	ldr	r2, [pc, #408]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fb1a 	bl	8000ef8 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028c8:	f7fe fb16 	bl	8000ef8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e23c      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028da:	4b5e      	ldr	r3, [pc, #376]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d036      	beq.n	8002960 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	4b56      	ldr	r3, [pc, #344]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	4a55      	ldr	r2, [pc, #340]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe faf7 	bl	8000ef8 <HAL_GetTick>
 800290a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe faf3 	bl	8000ef8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e219      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002920:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x35e>
 800292c:	e018      	b.n	8002960 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002932:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe fadd 	bl	8000ef8 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe fad9 	bl	8000ef8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1ff      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002954:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d036      	beq.n	80029da <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d019      	beq.n	80029a8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002974:	4b37      	ldr	r3, [pc, #220]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a36      	ldr	r2, [pc, #216]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 800297a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800297e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002980:	f7fe faba 	bl	8000ef8 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002988:	f7fe fab6 	bl	8000ef8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1dc      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800299a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x3d8>
 80029a6:	e018      	b.n	80029da <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a29      	ldr	r2, [pc, #164]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80029ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b4:	f7fe faa0 	bl	8000ef8 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029bc:	f7fe fa9c 	bl	8000ef8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1c2      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8086 	beq.w	8002af4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_RCC_OscConfig+0x4a8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <HAL_RCC_OscConfig+0x4a8>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fa80 	bl	8000ef8 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fa7c 	bl	8000ef8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1a2      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_RCC_OscConfig+0x4a8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x480>
 8002a22:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a0b      	ldr	r2, [pc, #44]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_OscConfig+0x4e6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4ac>
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a05      	ldr	r2, [pc, #20]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	4a02      	ldr	r2, [pc, #8]	@ (8002a54 <HAL_RCC_OscConfig+0x4a4>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a50:	e021      	b.n	8002a96 <HAL_RCC_OscConfig+0x4e6>
 8002a52:	bf00      	nop
 8002a54:	58024400 	.word	0x58024400
 8002a58:	58024800 	.word	0x58024800
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d10c      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4ce>
 8002a64:	4b83      	ldr	r3, [pc, #524]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	4a82      	ldr	r2, [pc, #520]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a70:	4b80      	ldr	r3, [pc, #512]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a74:	4a7f      	ldr	r2, [pc, #508]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7c:	e00b      	b.n	8002a96 <HAL_RCC_OscConfig+0x4e6>
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	4a7c      	ldr	r2, [pc, #496]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a79      	ldr	r2, [pc, #484]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa2b 	bl	8000ef8 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fa27 	bl	8000ef8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e14b      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abc:	4b6d      	ldr	r3, [pc, #436]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x4f6>
 8002ac8:	e014      	b.n	8002af4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe fa15 	bl	8000ef8 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fa11 	bl	8000ef8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e135      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ae8:	4b62      	ldr	r3, [pc, #392]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ee      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 812a 	beq.w	8002d52 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b06:	2b18      	cmp	r3, #24
 8002b08:	f000 80ba 	beq.w	8002c80 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 8095 	bne.w	8002c40 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b57      	ldr	r3, [pc, #348]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe f9e9 	bl	8000ef8 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe f9e5 	bl	8000ef8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10b      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b48:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x6c8>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4945      	ldr	r1, [pc, #276]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	3b01      	subs	r3, #1
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b92:	4938      	ldr	r1, [pc, #224]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	4a35      	ldr	r2, [pc, #212]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba4:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x6cc>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bb0:	00d2      	lsls	r2, r2, #3
 8002bb2:	4930      	ldr	r1, [pc, #192]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	f023 020c 	bic.w	r2, r3, #12
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	492b      	ldr	r1, [pc, #172]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	f023 0202 	bic.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4927      	ldr	r1, [pc, #156]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	4a24      	ldr	r2, [pc, #144]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be8:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c00:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a18      	ldr	r2, [pc, #96]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f96e 	bl	8000ef8 <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f96a 	bl	8000ef8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e090      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x670>
 8002c3e:	e088      	b.n	8002d52 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f954 	bl	8000ef8 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe f950 	bl	8000ef8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e076      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c66:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_RCC_OscConfig+0x6c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x6a4>
 8002c72:	e06e      	b.n	8002d52 <HAL_RCC_OscConfig+0x7a2>
 8002c74:	58024400 	.word	0x58024400
 8002c78:	fffffc0c 	.word	0xfffffc0c
 8002c7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c80:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c86:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d031      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0203 	and.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d12a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d122      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d11a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0a5b      	lsrs	r3, r3, #9
 8002cc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d111      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d108      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	0e1b      	lsrs	r3, r3, #24
 8002cea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02b      	b.n	8002d54 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d01f      	beq.n	8002d52 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d12:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	4a11      	ldr	r2, [pc, #68]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d1e:	f7fe f8eb 	bl	8000ef8 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d24:	bf00      	nop
 8002d26:	f7fe f8e7 	bl	8000ef8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d0f9      	beq.n	8002d26 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RCC_OscConfig+0x7b0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d3e:	00d2      	lsls	r2, r2, #3
 8002d40:	4906      	ldr	r1, [pc, #24]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_RCC_OscConfig+0x7ac>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3730      	adds	r7, #48	@ 0x30
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	ffff0007 	.word	0xffff0007

08002d64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e19c      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b87      	ldr	r3, [pc, #540]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	4985      	ldr	r1, [pc, #532]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b83      	ldr	r3, [pc, #524]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e184      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc4:	4b78      	ldr	r3, [pc, #480]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4975      	ldr	r1, [pc, #468]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b70      	ldr	r3, [pc, #448]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df2:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	496a      	ldr	r1, [pc, #424]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4b64      	ldr	r3, [pc, #400]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d908      	bls.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e20:	4b61      	ldr	r3, [pc, #388]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	495e      	ldr	r1, [pc, #376]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4b59      	ldr	r3, [pc, #356]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d908      	bls.n	8002e60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e4e:	4b56      	ldr	r3, [pc, #344]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4953      	ldr	r1, [pc, #332]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d908      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f023 020f 	bic.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4947      	ldr	r1, [pc, #284]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d055      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e9a:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4940      	ldr	r1, [pc, #256]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0f6      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d115      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ea      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee4:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0de      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d6      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4925      	ldr	r1, [pc, #148]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f16:	f7fd ffef 	bl	8000ef8 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1e:	f7fd ffeb 	bl	8000ef8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0be      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f34:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d1eb      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d208      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	490e      	ldr	r1, [pc, #56]	@ (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d214      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	4906      	ldr	r1, [pc, #24]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e086      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
 8002fa4:	52002000 	.word	0x52002000
 8002fa8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d208      	bcs.n	8002fda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4939      	ldr	r1, [pc, #228]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d208      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ff6:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	492e      	ldr	r1, [pc, #184]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003004:	4313      	orrs	r3, r2
 8003006:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003020:	429a      	cmp	r2, r3
 8003022:	d208      	bcs.n	8003036 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003024:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4922      	ldr	r1, [pc, #136]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003032:	4313      	orrs	r3, r2
 8003034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800304e:	429a      	cmp	r2, r3
 8003050:	d208      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003052:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4917      	ldr	r1, [pc, #92]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003060:	4313      	orrs	r3, r2
 8003062:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003064:	f000 f834 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	4912      	ldr	r1, [pc, #72]	@ (80030c0 <HAL_RCC_ClockConfig+0x35c>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	4a0d      	ldr	r2, [pc, #52]	@ (80030c0 <HAL_RCC_ClockConfig+0x35c>)
 800308c:	5cd3      	ldrb	r3, [r2, r3]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <HAL_RCC_ClockConfig+0x360>)
 800309a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_RCC_ClockConfig+0x364>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_RCC_ClockConfig+0x368>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fedc 	bl	8000e64 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	58024400 	.word	0x58024400
 80030c0:	08006f00 	.word	0x08006f00
 80030c4:	24000004 	.word	0x24000004
 80030c8:	24000000 	.word	0x24000000
 80030cc:	24000008 	.word	0x24000008

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d6:	4bb3      	ldr	r3, [pc, #716]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030de:	2b18      	cmp	r3, #24
 80030e0:	f200 8155 	bhi.w	800338e <HAL_RCC_GetSysClockFreq+0x2be>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003151 	.word	0x08003151
 80030f0:	0800338f 	.word	0x0800338f
 80030f4:	0800338f 	.word	0x0800338f
 80030f8:	0800338f 	.word	0x0800338f
 80030fc:	0800338f 	.word	0x0800338f
 8003100:	0800338f 	.word	0x0800338f
 8003104:	0800338f 	.word	0x0800338f
 8003108:	0800338f 	.word	0x0800338f
 800310c:	08003177 	.word	0x08003177
 8003110:	0800338f 	.word	0x0800338f
 8003114:	0800338f 	.word	0x0800338f
 8003118:	0800338f 	.word	0x0800338f
 800311c:	0800338f 	.word	0x0800338f
 8003120:	0800338f 	.word	0x0800338f
 8003124:	0800338f 	.word	0x0800338f
 8003128:	0800338f 	.word	0x0800338f
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800338f 	.word	0x0800338f
 8003134:	0800338f 	.word	0x0800338f
 8003138:	0800338f 	.word	0x0800338f
 800313c:	0800338f 	.word	0x0800338f
 8003140:	0800338f 	.word	0x0800338f
 8003144:	0800338f 	.word	0x0800338f
 8003148:	0800338f 	.word	0x0800338f
 800314c:	08003183 	.word	0x08003183
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003150:	4b94      	ldr	r3, [pc, #592]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800315c:	4b91      	ldr	r3, [pc, #580]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	4a90      	ldr	r2, [pc, #576]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800316e:	e111      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003170:	4b8d      	ldr	r3, [pc, #564]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003172:	61bb      	str	r3, [r7, #24]
      break;
 8003174:	e10e      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003176:	4b8d      	ldr	r3, [pc, #564]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003178:	61bb      	str	r3, [r7, #24]
      break;
 800317a:	e10b      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800317c:	4b8c      	ldr	r3, [pc, #560]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800317e:	61bb      	str	r3, [r7, #24]
      break;
 8003180:	e108      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003182:	4b88      	ldr	r3, [pc, #544]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800318c:	4b85      	ldr	r3, [pc, #532]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003196:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003198:	4b82      	ldr	r3, [pc, #520]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031a2:	4b80      	ldr	r3, [pc, #512]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80e1 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f000 8083 	beq.w	80032d4 <HAL_RCC_GetSysClockFreq+0x204>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f200 80a1 	bhi.w	8003318 <HAL_RCC_GetSysClockFreq+0x248>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x114>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d056      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031e2:	e099      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e4:	4b6f      	ldr	r3, [pc, #444]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02d      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031f0:	4b6c      	ldr	r3, [pc, #432]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	4a6b      	ldr	r2, [pc, #428]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b62      	ldr	r3, [pc, #392]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800324a:	e087      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b51      	ldr	r3, [pc, #324]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328e:	e065      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b40      	ldr	r3, [pc, #256]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d2:	e043      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b2f      	ldr	r3, [pc, #188]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003316:	e021      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	0a5b      	lsrs	r3, r3, #9
 8003362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003366:	3301      	adds	r3, #1
 8003368:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003374:	edd7 6a07 	vldr	s13, [r7, #28]
 8003378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003380:	ee17 3a90 	vmov	r3, s15
 8003384:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
      break;
 800338c:	e002      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003390:	61bb      	str	r3, [r7, #24]
      break;
 8003392:	bf00      	nop
  }

  return sysclockfreq;
 8003394:	69bb      	ldr	r3, [r7, #24]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	@ 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	58024400 	.word	0x58024400
 80033a8:	03d09000 	.word	0x03d09000
 80033ac:	003d0900 	.word	0x003d0900
 80033b0:	017d7840 	.word	0x017d7840
 80033b4:	46000000 	.word	0x46000000
 80033b8:	4c742400 	.word	0x4c742400
 80033bc:	4a742400 	.word	0x4a742400
 80033c0:	4bbebc20 	.word	0x4bbebc20

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ca:	f7ff fe81 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x50>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490f      	ldr	r1, [pc, #60]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x54>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	4a09      	ldr	r2, [pc, #36]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x54>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a07      	ldr	r2, [pc, #28]	@ (800341c <HAL_RCC_GetHCLKFreq+0x58>)
 8003400:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003402:	4a07      	ldr	r2, [pc, #28]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <HAL_RCC_GetHCLKFreq+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	08006f00 	.word	0x08006f00
 800341c:	24000004 	.word	0x24000004
 8003420:	24000000 	.word	0x24000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003428:	f7ff ffcc 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_RCC_GetPCLK1Freq+0x28>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58024400 	.word	0x58024400
 800344c:	08006f00 	.word	0x08006f00

08003450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003454:	f7ff ffb6 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4904      	ldr	r1, [pc, #16]	@ (8003478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	08006f00 	.word	0x08006f00

0800347c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800347c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003480:	b0c6      	sub	sp, #280	@ 0x118
 8003482:	af00      	add	r7, sp, #0
 8003484:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003488:	2300      	movs	r3, #0
 800348a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348e:	2300      	movs	r3, #0
 8003490:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034a0:	2500      	movs	r5, #0
 80034a2:	ea54 0305 	orrs.w	r3, r4, r5
 80034a6:	d049      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034b2:	d02f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034b8:	d828      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034be:	d01a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c4:	d822      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ce:	d007      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d0:	e01c      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d2:	4bab      	ldr	r3, [pc, #684]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4aaa      	ldr	r2, [pc, #680]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034de:	e01a      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	3308      	adds	r3, #8
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fc25 	bl	8004d38 <RCCEx_PLL2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f4:	e00f      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034fa:	3328      	adds	r3, #40	@ 0x28
 80034fc:	2102      	movs	r1, #2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fccc 	bl	8004e9c <RCCEx_PLL3_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800350a:	e004      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800351e:	4b98      	ldr	r3, [pc, #608]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003522:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800352c:	4a94      	ldr	r2, [pc, #592]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800352e:	430b      	orrs	r3, r1
 8003530:	6513      	str	r3, [r2, #80]	@ 0x50
 8003532:	e003      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003548:	f04f 0900 	mov.w	r9, #0
 800354c:	ea58 0309 	orrs.w	r3, r8, r9
 8003550:	d047      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	2b04      	cmp	r3, #4
 800355a:	d82a      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003579 	.word	0x08003579
 8003568:	08003587 	.word	0x08003587
 800356c:	0800359d 	.word	0x0800359d
 8003570:	080035bb 	.word	0x080035bb
 8003574:	080035bb 	.word	0x080035bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b81      	ldr	r3, [pc, #516]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a80      	ldr	r2, [pc, #512]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003584:	e01a      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358a:	3308      	adds	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fbd2 	bl	8004d38 <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359a:	e00f      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc79 	bl	8004e9c <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b0:	e004      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c8:	f023 0107 	bic.w	r1, r3, #7
 80035cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80035ee:	f04f 0b00 	mov.w	fp, #0
 80035f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003600:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003604:	d03b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003606:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800360a:	d834      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800360c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003610:	d037      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003612:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003616:	d82e      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003618:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800361c:	d033      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800361e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003622:	d828      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003628:	d01a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d822      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003638:	d007      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800363a:	e01c      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	4a4f      	ldr	r2, [pc, #316]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003648:	e01e      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364e:	3308      	adds	r3, #8
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fb70 	bl	8004d38 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800365e:	e013      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003664:	3328      	adds	r3, #40	@ 0x28
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fc17 	bl	8004e9c <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800367c:	e004      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800367e:	bf00      	nop
 8003680:	e002      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003690:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036a0:	4a37      	ldr	r2, [pc, #220]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d05d      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80036dc:	d03b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80036e2:	d834      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e8:	d037      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80036ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ee:	d82e      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036f4:	d033      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80036f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036fa:	d828      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003700:	d01a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003706:	d822      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800370c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003710:	d007      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003712:	e01c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b1a      	ldr	r3, [pc, #104]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003720:	e01e      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003726:	3308      	adds	r3, #8
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 fb04 	bl	8004d38 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003736:	e013      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373c:	3328      	adds	r3, #40	@ 0x28
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fbab 	bl	8004e9c <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800375e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003778:	4a01      	ldr	r2, [pc, #4]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800377a:	430b      	orrs	r3, r1
 800377c:	6593      	str	r3, [r2, #88]	@ 0x58
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003788:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003798:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d03a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80037ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	2b30      	cmp	r3, #48	@ 0x30
 80037b4:	d01f      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80037b6:	2b30      	cmp	r3, #48	@ 0x30
 80037b8:	d819      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d815      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d111      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4baa      	ldr	r3, [pc, #680]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	4aa9      	ldr	r2, [pc, #676]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037dc:	3308      	adds	r3, #8
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 faa9 	bl	8004d38 <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003804:	4b9b      	ldr	r3, [pc, #620]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800380c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	4a98      	ldr	r2, [pc, #608]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003814:	430b      	orrs	r3, r1
 8003816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800382e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003838:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d051      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800384c:	d035      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800384e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003852:	d82e      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003854:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003858:	d031      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x442>
 800385a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800385e:	d828      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003864:	d01a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386a:	d822      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003874:	d007      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003876:	e01c      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b7e      	ldr	r3, [pc, #504]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003884:	e01c      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388a:	3308      	adds	r3, #8
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fa52 	bl	8004d38 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800389a:	e011      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	3328      	adds	r3, #40	@ 0x28
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 faf9 	bl	8004e9c <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	4a67      	ldr	r2, [pc, #412]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6513      	str	r3, [r2, #80]	@ 0x50
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d053      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003910:	d033      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003916:	d82c      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800391c:	d02f      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003922:	d826      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003924:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003928:	d02b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800392a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800392e:	d820      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003934:	d012      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800393a:	d81a      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d022      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d115      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	3308      	adds	r3, #8
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f9f2 	bl	8004d38 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800395a:	e015      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003960:	3328      	adds	r3, #40	@ 0x28
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fa99 	bl	8004e9c <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003970:	e00a      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800397a:	bf00      	nop
 800397c:	e004      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003990:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	4a35      	ldr	r2, [pc, #212]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d058      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039da:	d033      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e0:	d82c      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e6:	d02f      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d826      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039f2:	d02b      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80039f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039f8:	d820      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fe:	d012      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d81a      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d022      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0e:	d115      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a14:	3308      	adds	r3, #8
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f98d 	bl	8004d38 <RCCEx_PLL2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a24:	e015      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2a:	3328      	adds	r3, #40	@ 0x28
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fa34 	bl	8004e9c <RCCEx_PLL3_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a42:	e006      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a44:	bf00      	nop
 8003a46:	e004      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e002      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a6a:	4a02      	ldr	r2, [pc, #8]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a70:	e006      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	d037      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aaa:	d00e      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab0:	d816      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aba:	d111      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abc:	4bc4      	ldr	r3, [pc, #784]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	4ac3      	ldr	r2, [pc, #780]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ac8:	e00f      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	3308      	adds	r3, #8
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f930 	bl	8004d38 <RCCEx_PLL2_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ade:	e004      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003af2:	4bb7      	ldr	r3, [pc, #732]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b00:	4ab3      	ldr	r2, [pc, #716]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b02:	430b      	orrs	r3, r1
 8003b04:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b06:	e003      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	d039      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d81c      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08003b51 	.word	0x08003b51
 8003b48:	08003b5f 	.word	0x08003b5f
 8003b4c:	08003b7d 	.word	0x08003b7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4b9f      	ldr	r3, [pc, #636]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4a9e      	ldr	r2, [pc, #632]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b62:	3308      	adds	r3, #8
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f8e6 	bl	8004d38 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b86:	4b92      	ldr	r3, [pc, #584]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	f023 0103 	bic.w	r1, r3, #3
 8003b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b94:	4a8e      	ldr	r2, [pc, #568]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f000 8099 	beq.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc6:	4b83      	ldr	r3, [pc, #524]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a82      	ldr	r2, [pc, #520]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd2:	f7fd f991 	bl	8000ef8 <HAL_GetTick>
 8003bd6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fd f98c 	bl	8000ef8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	@ 0x64
 8003bea:	d903      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf4:	4b77      	ldr	r3, [pc, #476]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ed      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d173      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c08:	4b71      	ldr	r3, [pc, #452]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c14:	4053      	eors	r3, r2
 8003c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	4b69      	ldr	r3, [pc, #420]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a68      	ldr	r2, [pc, #416]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c36:	4b66      	ldr	r3, [pc, #408]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	4a65      	ldr	r2, [pc, #404]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c42:	4a63      	ldr	r2, [pc, #396]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c56:	d118      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd f94e 	bl	8000ef8 <HAL_GetTick>
 8003c5c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c60:	e00d      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd f949 	bl	8000ef8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d903      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7e:	4b54      	ldr	r3, [pc, #336]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0eb      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d129      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cb4:	091a      	lsrs	r2, r3, #4
 8003cb6:	4b48      	ldr	r3, [pc, #288]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	4a45      	ldr	r2, [pc, #276]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6113      	str	r3, [r2, #16]
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003cc2:	4b43      	ldr	r3, [pc, #268]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4a42      	ldr	r2, [pc, #264]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ccc:	6113      	str	r3, [r2, #16]
 8003cce:	4b40      	ldr	r3, [pc, #256]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f002 0301 	and.w	r3, r2, #1
 8003d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f000 808f 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d20:	2b28      	cmp	r3, #40	@ 0x28
 8003d22:	d871      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d24:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003e11 	.word	0x08003e11
 8003d30:	08003e09 	.word	0x08003e09
 8003d34:	08003e09 	.word	0x08003e09
 8003d38:	08003e09 	.word	0x08003e09
 8003d3c:	08003e09 	.word	0x08003e09
 8003d40:	08003e09 	.word	0x08003e09
 8003d44:	08003e09 	.word	0x08003e09
 8003d48:	08003e09 	.word	0x08003e09
 8003d4c:	08003ddd 	.word	0x08003ddd
 8003d50:	08003e09 	.word	0x08003e09
 8003d54:	08003e09 	.word	0x08003e09
 8003d58:	08003e09 	.word	0x08003e09
 8003d5c:	08003e09 	.word	0x08003e09
 8003d60:	08003e09 	.word	0x08003e09
 8003d64:	08003e09 	.word	0x08003e09
 8003d68:	08003e09 	.word	0x08003e09
 8003d6c:	08003df3 	.word	0x08003df3
 8003d70:	08003e09 	.word	0x08003e09
 8003d74:	08003e09 	.word	0x08003e09
 8003d78:	08003e09 	.word	0x08003e09
 8003d7c:	08003e09 	.word	0x08003e09
 8003d80:	08003e09 	.word	0x08003e09
 8003d84:	08003e09 	.word	0x08003e09
 8003d88:	08003e09 	.word	0x08003e09
 8003d8c:	08003e11 	.word	0x08003e11
 8003d90:	08003e09 	.word	0x08003e09
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	08003e09 	.word	0x08003e09
 8003d9c:	08003e09 	.word	0x08003e09
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e09 	.word	0x08003e09
 8003da8:	08003e09 	.word	0x08003e09
 8003dac:	08003e11 	.word	0x08003e11
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003e09 	.word	0x08003e09
 8003dc0:	08003e09 	.word	0x08003e09
 8003dc4:	08003e09 	.word	0x08003e09
 8003dc8:	08003e09 	.word	0x08003e09
 8003dcc:	08003e11 	.word	0x08003e11
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58024800 	.word	0x58024800
 8003dd8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de0:	3308      	adds	r3, #8
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 ffa7 	bl	8004d38 <RCCEx_PLL2_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003df0:	e00f      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	3328      	adds	r3, #40	@ 0x28
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f001 f84e 	bl	8004e9c <RCCEx_PLL3_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e06:	e004      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e1a:	4bbf      	ldr	r3, [pc, #764]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e28:	4abb      	ldr	r2, [pc, #748]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 0302 	and.w	r3, r2, #2
 8003e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d041      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d824      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003e62:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003eb5 	.word	0x08003eb5
 8003e6c:	08003e81 	.word	0x08003e81
 8003e70:	08003e97 	.word	0x08003e97
 8003e74:	08003eb5 	.word	0x08003eb5
 8003e78:	08003eb5 	.word	0x08003eb5
 8003e7c:	08003eb5 	.word	0x08003eb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	3308      	adds	r3, #8
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ff55 	bl	8004d38 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	3328      	adds	r3, #40	@ 0x28
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fffc 	bl	8004e9c <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ebe:	4b96      	ldr	r3, [pc, #600]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	f023 0107 	bic.w	r1, r3, #7
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ecc:	4a92      	ldr	r2, [pc, #584]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 0304 	and.w	r3, r2, #4
 8003ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ef2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	d044      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d825      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f3f 	.word	0x08003f3f
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f5d 	.word	0x08003f5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ff01 	bl	8004d38 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f42:	3328      	adds	r3, #40	@ 0x28
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 ffa8 	bl	8004e9c <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f66:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f023 0107 	bic.w	r1, r3, #7
 8003f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	4a68      	ldr	r2, [pc, #416]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f002 0320 	and.w	r3, r2, #32
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d055      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb2:	d033      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb8:	d82c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d02f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d826      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fca:	d02b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fd0:	d820      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd6:	d012      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fdc:	d81a      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d022      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fe6:	d115      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fec:	3308      	adds	r3, #8
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fea1 	bl	8004d38 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e015      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	3328      	adds	r3, #40	@ 0x28
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff48 	bl	8004e9c <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004012:	e00a      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800401a:	e006      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800401c:	bf00      	nop
 800401e:	e004      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800403a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004042:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6553      	str	r3, [r2, #84]	@ 0x54
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800404e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800405e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004068:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800406c:	460b      	mov	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	d058      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800407a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800407e:	d033      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004080:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004084:	d82c      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408a:	d02f      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004090:	d826      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004092:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004096:	d02b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800409c:	d820      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800409e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040a2:	d012      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80040a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040a8:	d81a      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d022      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d115      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b8:	3308      	adds	r3, #8
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fe3b 	bl	8004d38 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040c8:	e015      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ce:	3328      	adds	r3, #40	@ 0x28
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fee2 	bl	8004e9c <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040de:	e00a      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040e6:	e006      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040e8:	bf00      	nop
 80040ea:	e004      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040ec:	bf00      	nop
 80040ee:	e002      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040f0:	bf00      	nop
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10e      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800410e:	4a02      	ldr	r2, [pc, #8]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004110:	430b      	orrs	r3, r1
 8004112:	6593      	str	r3, [r2, #88]	@ 0x58
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004130:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800413a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d055      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004148:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800414c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004150:	d033      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004152:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004156:	d82c      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415c:	d02f      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004162:	d826      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004164:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004168:	d02b      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800416a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800416e:	d820      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004174:	d012      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800417a:	d81a      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004184:	d115      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	3308      	adds	r3, #8
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fdd2 	bl	8004d38 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800419a:	e015      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	3328      	adds	r3, #40	@ 0x28
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fe79 	bl	8004e9c <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041b0:	e00a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041ba:	bf00      	nop
 80041bc:	e004      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041d0:	4ba0      	ldr	r3, [pc, #640]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e0:	4a9c      	ldr	r2, [pc, #624]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 0308 	and.w	r3, r2, #8
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004206:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800420a:	460b      	mov	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	d01e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004222:	3328      	adds	r3, #40	@ 0x28
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fe38 	bl	8004e9c <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004238:	4b86      	ldr	r3, [pc, #536]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004248:	4a82      	ldr	r2, [pc, #520]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800424a:	430b      	orrs	r3, r1
 800424c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f002 0310 	and.w	r3, r2, #16
 800425a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004264:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d01e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427a:	d10c      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004280:	3328      	adds	r3, #40	@ 0x28
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe09 	bl	8004e9c <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004296:	4b6f      	ldr	r3, [pc, #444]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ba:	2300      	movs	r3, #0
 80042bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d03e      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042d4:	d022      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80042d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042da:	d81b      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e4:	d00b      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80042e6:	e015      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ec:	3308      	adds	r3, #8
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd21 	bl	8004d38 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fdc8 	bl	8004e9c <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004312:	e004      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800431c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004326:	4b4b      	ldr	r3, [pc, #300]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004336:	4a47      	ldr	r2, [pc, #284]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6593      	str	r3, [r2, #88]	@ 0x58
 800433c:	e003      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004352:	673b      	str	r3, [r7, #112]	@ 0x70
 8004354:	2300      	movs	r3, #0
 8004356:	677b      	str	r3, [r7, #116]	@ 0x74
 8004358:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800435c:	460b      	mov	r3, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	d03b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800436a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800436e:	d01f      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004370:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004374:	d818      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800437c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004380:	d007      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004384:	4b33      	ldr	r3, [pc, #204]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4a32      	ldr	r2, [pc, #200]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800438a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004390:	e00f      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004396:	3328      	adds	r3, #40	@ 0x28
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fd7e 	bl	8004e9c <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ba:	4b26      	ldr	r3, [pc, #152]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ca:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e8:	2300      	movs	r3, #0
 80043ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043f0:	460b      	mov	r3, r1
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d034      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004404:	d007      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004406:	e011      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004414:	e00e      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441a:	3308      	adds	r3, #8
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fc8a 	bl	8004d38 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10d      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444a:	4a02      	ldr	r2, [pc, #8]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800444c:	430b      	orrs	r3, r1
 800444e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004450:	e006      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004452:	bf00      	nop
 8004454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800445c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800446c:	663b      	str	r3, [r7, #96]	@ 0x60
 800446e:	2300      	movs	r3, #0
 8004470:	667b      	str	r3, [r7, #100]	@ 0x64
 8004472:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d00c      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004480:	3328      	adds	r3, #40	@ 0x28
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd09 	bl	8004e9c <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044a4:	2300      	movs	r3, #0
 80044a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d036      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044bc:	d018      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d811      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d014      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d80b      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d011      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d106      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044da:	4bb7      	ldr	r3, [pc, #732]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	4ab6      	ldr	r2, [pc, #728]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004502:	4bad      	ldr	r3, [pc, #692]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004510:	4aa9      	ldr	r2, [pc, #676]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6553      	str	r3, [r2, #84]	@ 0x54
 8004516:	e003      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800451c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800452c:	653b      	str	r3, [r7, #80]	@ 0x50
 800452e:	2300      	movs	r3, #0
 8004530:	657b      	str	r3, [r7, #84]	@ 0x54
 8004532:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800453c:	4b9e      	ldr	r3, [pc, #632]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a9b      	ldr	r2, [pc, #620]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455e:	2300      	movs	r3, #0
 8004560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004562:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800456c:	4b92      	ldr	r3, [pc, #584]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800457a:	4a8f      	ldr	r2, [pc, #572]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800458c:	643b      	str	r3, [r7, #64]	@ 0x40
 800458e:	2300      	movs	r3, #0
 8004590:	647b      	str	r3, [r7, #68]	@ 0x44
 8004592:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800459c:	4b86      	ldr	r3, [pc, #536]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4a85      	ldr	r2, [pc, #532]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045a6:	6113      	str	r3, [r2, #16]
 80045a8:	4b83      	ldr	r3, [pc, #524]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045aa:	6919      	ldr	r1, [r3, #16]
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045b4:	4a80      	ldr	r2, [pc, #512]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c8:	2300      	movs	r3, #0
 80045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045d6:	4b78      	ldr	r3, [pc, #480]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	4a74      	ldr	r2, [pc, #464]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f8:	2300      	movs	r3, #0
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004606:	4b6c      	ldr	r3, [pc, #432]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	4a68      	ldr	r2, [pc, #416]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004618:	430b      	orrs	r3, r1
 800461a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	2100      	movs	r1, #0
 8004626:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d011      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800463c:	3308      	adds	r3, #8
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fb79 	bl	8004d38 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800464c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004658:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800465c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	2100      	movs	r1, #0
 8004666:	6239      	str	r1, [r7, #32]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
 800466e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004672:	460b      	mov	r3, r1
 8004674:	4313      	orrs	r3, r2
 8004676:	d011      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800467c:	3308      	adds	r3, #8
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fb59 	bl	8004d38 <RCCEx_PLL2_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800468c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004698:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	2100      	movs	r1, #0
 80046a6:	61b9      	str	r1, [r7, #24]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046b2:	460b      	mov	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	d011      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	3308      	adds	r3, #8
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fb39 	bl	8004d38 <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	2100      	movs	r1, #0
 80046e6:	6139      	str	r1, [r7, #16]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d011      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	3328      	adds	r3, #40	@ 0x28
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fbcb 	bl	8004e9c <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800470c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	2100      	movs	r1, #0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d011      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473c:	3328      	adds	r3, #40	@ 0x28
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fbab 	bl	8004e9c <RCCEx_PLL3_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800474c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	2100      	movs	r1, #0
 8004766:	6039      	str	r1, [r7, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d011      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477c:	3328      	adds	r3, #40	@ 0x28
 800477e:	2102      	movs	r1, #2
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fb8b 	bl	8004e9c <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800478c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800479c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400

080047bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047c0:	f7fe fe00 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	08006f00 	.word	0x08006f00

080047e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	@ 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	0b1b      	lsrs	r3, r3, #12
 8004800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004804:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004806:	4b9c      	ldr	r3, [pc, #624]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004812:	4b99      	ldr	r3, [pc, #612]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8111 	beq.w	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f000 8083 	beq.w	8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b02      	cmp	r3, #2
 8004842:	f200 80a1 	bhi.w	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d056      	beq.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004852:	e099      	b.n	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004854:	4b88      	ldr	r3, [pc, #544]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02d      	beq.n	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004860:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a84      	ldr	r2, [pc, #528]	@ (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048ba:	e087      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048fe:	e065      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004912:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004922:	ed97 6a03 	vldr	s12, [r7, #12]
 8004926:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004942:	e043      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b48      	ldr	r3, [pc, #288]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a03 	vldr	s12, [r7, #12]
 800496a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004986:	e021      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b37      	ldr	r3, [pc, #220]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f2:	ee17 2a90 	vmov	r2, s15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a20:	ee17 2a90 	vmov	r2, s15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 2a90 	vmov	r2, s15
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a56:	e008      	b.n	8004a6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
}
 8004a6a:	bf00      	nop
 8004a6c:	3724      	adds	r7, #36	@ 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	03d09000 	.word	0x03d09000
 8004a80:	46000000 	.word	0x46000000
 8004a84:	4c742400 	.word	0x4c742400
 8004a88:	4a742400 	.word	0x4a742400
 8004a8c:	4bbebc20 	.word	0x4bbebc20

08004a90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	@ 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a98:	4ba1      	ldr	r3, [pc, #644]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004aa2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	0d1b      	lsrs	r3, r3, #20
 8004aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aae:	4b9c      	ldr	r3, [pc, #624]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aba:	4b99      	ldr	r3, [pc, #612]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8111 	beq.w	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	f000 8083 	beq.w	8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	f200 80a1 	bhi.w	8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d056      	beq.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004afa:	e099      	b.n	8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afc:	4b88      	ldr	r3, [pc, #544]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02d      	beq.n	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b08:	4b85      	ldr	r3, [pc, #532]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	4a84      	ldr	r2, [pc, #528]	@ (8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b7b      	ldr	r3, [pc, #492]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b62:	e087      	b.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b6a      	ldr	r3, [pc, #424]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba6:	e065      	b.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b59      	ldr	r3, [pc, #356]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bea:	e043      	b.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b48      	ldr	r3, [pc, #288]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c2e:	e021      	b.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	0a5b      	lsrs	r3, r3, #9
 8004c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9a:	ee17 2a90 	vmov	r2, s15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 2a90 	vmov	r2, s15
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cd0:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf6:	ee17 2a90 	vmov	r2, s15
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cfe:	e008      	b.n	8004d12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	@ 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400
 8004d24:	03d09000 	.word	0x03d09000
 8004d28:	46000000 	.word	0x46000000
 8004d2c:	4c742400 	.word	0x4c742400
 8004d30:	4a742400 	.word	0x4a742400
 8004d34:	4bbebc20 	.word	0x4bbebc20

08004d38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d46:	4b53      	ldr	r3, [pc, #332]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d101      	bne.n	8004d56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e099      	b.n	8004e8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d56:	4b4f      	ldr	r3, [pc, #316]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d62:	f7fc f8c9 	bl	8000ef8 <HAL_GetTick>
 8004d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d6a:	f7fc f8c5 	bl	8000ef8 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e086      	b.n	8004e8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d7c:	4b45      	ldr	r3, [pc, #276]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d88:	4b42      	ldr	r3, [pc, #264]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	493f      	ldr	r1, [pc, #252]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	025b      	lsls	r3, r3, #9
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dcc:	4931      	ldr	r1, [pc, #196]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dd2:	4b30      	ldr	r3, [pc, #192]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	492d      	ldr	r1, [pc, #180]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004de4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	f023 0220 	bic.w	r2, r3, #32
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4928      	ldr	r1, [pc, #160]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004df6:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a26      	ldr	r2, [pc, #152]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f023 0310 	bic.w	r3, r3, #16
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e02:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e06:	4b24      	ldr	r3, [pc, #144]	@ (8004e98 <RCCEx_PLL2_Config+0x160>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	69d2      	ldr	r2, [r2, #28]
 8004e0e:	00d2      	lsls	r2, r2, #3
 8004e10:	4920      	ldr	r1, [pc, #128]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e16:	4b1f      	ldr	r3, [pc, #124]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	f043 0310 	orr.w	r3, r3, #16
 8004e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e28:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e34:	e00f      	b.n	8004e56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e3c:	4b15      	ldr	r3, [pc, #84]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	4a14      	ldr	r2, [pc, #80]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e48:	e005      	b.n	8004e56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e56:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e62:	f7fc f849 	bl	8000ef8 <HAL_GetTick>
 8004e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e6a:	f7fc f845 	bl	8000ef8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e006      	b.n	8004e8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <RCCEx_PLL2_Config+0x15c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400
 8004e98:	ffff0007 	.word	0xffff0007

08004e9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eaa:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d101      	bne.n	8004eba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e099      	b.n	8004fee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eba:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fc f817 	bl	8000ef8 <HAL_GetTick>
 8004eca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ece:	f7fc f813 	bl	8000ef8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e086      	b.n	8004fee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ee0:	4b45      	ldr	r3, [pc, #276]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eec:	4b42      	ldr	r3, [pc, #264]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	051b      	lsls	r3, r3, #20
 8004efa:	493f      	ldr	r1, [pc, #252]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	025b      	lsls	r3, r3, #9
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f30:	4931      	ldr	r1, [pc, #196]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f36:	4b30      	ldr	r3, [pc, #192]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	492d      	ldr	r1, [pc, #180]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4928      	ldr	r1, [pc, #160]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f66:	4b24      	ldr	r3, [pc, #144]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6a:	4b24      	ldr	r3, [pc, #144]	@ (8004ffc <RCCEx_PLL3_Config+0x160>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	69d2      	ldr	r2, [r2, #28]
 8004f72:	00d2      	lsls	r2, r2, #3
 8004f74:	4920      	ldr	r1, [pc, #128]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f98:	e00f      	b.n	8004fba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d106      	bne.n	8004fae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fa0:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fac:	e005      	b.n	8004fba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fae:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fba:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc6:	f7fb ff97 	bl	8000ef8 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fcc:	e008      	b.n	8004fe0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fce:	f7fb ff93 	bl	8000ef8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e006      	b.n	8004fee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <RCCEx_PLL3_Config+0x15c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	ffff0007 	.word	0xffff0007

08005000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e042      	b.n	8005098 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fb fcd5 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2224      	movs	r2, #36	@ 0x24
 800502e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 fb58 	bl	8006700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fce9 	bl	8005a28 <UART_SetConfig>
 8005056:	4603      	mov	r3, r0
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e01b      	b.n	8005098 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fbd7 	bl	8006844 <UART_CheckIdleState>
 8005096:	4603      	mov	r3, r0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e031      	b.n	8005116 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2224      	movs	r2, #36	@ 0x24
 80050b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb fce8 	bl	8000ab8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b08a      	sub	sp, #40	@ 0x28
 8005122:	af02      	add	r7, sp, #8
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	2b20      	cmp	r3, #32
 8005136:	d17b      	bne.n	8005230 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_UART_Transmit+0x26>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e074      	b.n	8005232 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2221      	movs	r2, #33	@ 0x21
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005158:	f7fb fece 	bl	8000ef8 <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005176:	d108      	bne.n	800518a <HAL_UART_Transmit+0x6c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e003      	b.n	8005192 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005192:	e030      	b.n	80051f6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f001 fbfa 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e03d      	b.n	8005232 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3302      	adds	r3, #2
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e007      	b.n	80051e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1c8      	bne.n	8005194 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2140      	movs	r1, #64	@ 0x40
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f001 fbc3 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0ba      	sub	sp, #232	@ 0xe8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005266:	f640 030f 	movw	r3, #2063	@ 0x80f
 800526a:	4013      	ands	r3, r2
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11b      	bne.n	80052b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8393 	beq.w	80059cc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
      }
      return;
 80052ae:	e38d      	b.n	80059cc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8123 	beq.w	8005500 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052be:	4b8d      	ldr	r3, [pc, #564]	@ (80054f4 <HAL_UART_IRQHandler+0x2b8>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052ca:	4b8b      	ldr	r3, [pc, #556]	@ (80054f8 <HAL_UART_IRQHandler+0x2bc>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8116 	beq.w	8005500 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_UART_IRQHandler+0xc8>
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <HAL_UART_IRQHandler+0xf8>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2202      	movs	r2, #2
 8005322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d011      	beq.n	8005364 <HAL_UART_IRQHandler+0x128>
 8005340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2204      	movs	r2, #4
 8005352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	f043 0202 	orr.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800537c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005380:	4b5c      	ldr	r3, [pc, #368]	@ (80054f4 <HAL_UART_IRQHandler+0x2b8>)
 8005382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2208      	movs	r2, #8
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	f043 0208 	orr.w	r2, r3, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_UART_IRQHandler+0x196>
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 82f9 	beq.w	80059d0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d013      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	d054      	beq.n	80054e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fb1c 	bl	8006a74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d146      	bne.n	80054d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800547a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800548e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1d9      	bne.n	800544a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <HAL_UART_IRQHandler+0x2c0>)
 80054a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fc fa29 	bl	8001908 <HAL_DMA_Abort_IT>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d019      	beq.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ce:	e00f      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa93 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d6:	e00b      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa8f 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054de:	e007      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa8b 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80054ee:	e26f      	b.n	80059d0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	bf00      	nop
    return;
 80054f2:	e26d      	b.n	80059d0 <HAL_UART_IRQHandler+0x794>
 80054f4:	10000001 	.word	0x10000001
 80054f8:	04000120 	.word	0x04000120
 80054fc:	08006b41 	.word	0x08006b41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 8203 	bne.w	8005910 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 81fc 	beq.w	8005910 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 81f5 	beq.w	8005910 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2210      	movs	r2, #16
 800552c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	f040 816d 	bne.w	8005818 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4aa4      	ldr	r2, [pc, #656]	@ (80057d8 <HAL_UART_IRQHandler+0x59c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d068      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4aa1      	ldr	r2, [pc, #644]	@ (80057dc <HAL_UART_IRQHandler+0x5a0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d061      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a9f      	ldr	r2, [pc, #636]	@ (80057e0 <HAL_UART_IRQHandler+0x5a4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d05a      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a9c      	ldr	r2, [pc, #624]	@ (80057e4 <HAL_UART_IRQHandler+0x5a8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d053      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a9a      	ldr	r2, [pc, #616]	@ (80057e8 <HAL_UART_IRQHandler+0x5ac>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04c      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a97      	ldr	r2, [pc, #604]	@ (80057ec <HAL_UART_IRQHandler+0x5b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d045      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a95      	ldr	r2, [pc, #596]	@ (80057f0 <HAL_UART_IRQHandler+0x5b4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d03e      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a92      	ldr	r2, [pc, #584]	@ (80057f4 <HAL_UART_IRQHandler+0x5b8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d037      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a90      	ldr	r2, [pc, #576]	@ (80057f8 <HAL_UART_IRQHandler+0x5bc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d030      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a8d      	ldr	r2, [pc, #564]	@ (80057fc <HAL_UART_IRQHandler+0x5c0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d029      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a8b      	ldr	r2, [pc, #556]	@ (8005800 <HAL_UART_IRQHandler+0x5c4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a88      	ldr	r2, [pc, #544]	@ (8005804 <HAL_UART_IRQHandler+0x5c8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01b      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a86      	ldr	r2, [pc, #536]	@ (8005808 <HAL_UART_IRQHandler+0x5cc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d014      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a83      	ldr	r2, [pc, #524]	@ (800580c <HAL_UART_IRQHandler+0x5d0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00d      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a81      	ldr	r2, [pc, #516]	@ (8005810 <HAL_UART_IRQHandler+0x5d4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d006      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a7e      	ldr	r2, [pc, #504]	@ (8005814 <HAL_UART_IRQHandler+0x5d8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d106      	bne.n	800562c <HAL_UART_IRQHandler+0x3f0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b29b      	uxth	r3, r3
 800562a:	e005      	b.n	8005638 <HAL_UART_IRQHandler+0x3fc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800563c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80ad 	beq.w	80057a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800564c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005650:	429a      	cmp	r2, r3
 8005652:	f080 80a5 	bcs.w	80057a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800565c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566c:	f000 8087 	beq.w	800577e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800569a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800569e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1da      	bne.n	8005670 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3308      	adds	r3, #8
 80056da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e1      	bne.n	80056ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800570c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800571a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800571c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e3      	bne.n	80056f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800574a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800575e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800576c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e4      	bne.n	800573c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005778:	4618      	mov	r0, r3
 800577a:	f7fb fda7 	bl	80012cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005790:	b29b      	uxth	r3, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f939 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800579e:	e119      	b.n	80059d4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057aa:	429a      	cmp	r2, r3
 80057ac:	f040 8112 	bne.w	80059d4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057bc:	f040 810a 	bne.w	80059d4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f91e 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
      return;
 80057d4:	e0fe      	b.n	80059d4 <HAL_UART_IRQHandler+0x798>
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80cf 	beq.w	80059d8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800583a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80ca 	beq.w	80059d8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005866:	647b      	str	r3, [r7, #68]	@ 0x44
 8005868:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e4      	bne.n	8005844 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	4b55      	ldr	r3, [pc, #340]	@ (80059e4 <HAL_UART_IRQHandler+0x7a8>)
 800588e:	4013      	ands	r3, r2
 8005890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800589e:	633a      	str	r2, [r7, #48]	@ 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	617b      	str	r3, [r7, #20]
   return(result);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e4      	bne.n	80058c6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f881 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800590e:	e063      	b.n	80059d8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <HAL_UART_IRQHandler+0x6fe>
 800591c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 f941 	bl	8006bba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005938:	e051      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d014      	beq.n	8005970 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d03a      	beq.n	80059dc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
    }
    return;
 800596e:	e035      	b.n	80059dc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <HAL_UART_IRQHandler+0x754>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f8eb 	bl	8006b64 <UART_EndTransmit_IT>
    return;
 800598e:	e026      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <HAL_UART_IRQHandler+0x774>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f91a 	bl	8006be2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ae:	e016      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_UART_IRQHandler+0x7a2>
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da0c      	bge.n	80059de <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 f902 	bl	8006bce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ca:	e008      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059cc:	bf00      	nop
 80059ce:	e006      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
    return;
 80059d0:	bf00      	nop
 80059d2:	e004      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
    return;
 80059dc:	bf00      	nop
  }
}
 80059de:	37e8      	adds	r7, #232	@ 0xe8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	effffffe 	.word	0xeffffffe

080059e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b092      	sub	sp, #72	@ 0x48
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4bbe      	ldr	r3, [pc, #760]	@ (8005d50 <UART_SetConfig+0x328>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4ab3      	ldr	r2, [pc, #716]	@ (8005d54 <UART_SetConfig+0x32c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a90:	4313      	orrs	r3, r2
 8005a92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	4baf      	ldr	r3, [pc, #700]	@ (8005d58 <UART_SetConfig+0x330>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	f023 010f 	bic.w	r1, r3, #15
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4aa6      	ldr	r2, [pc, #664]	@ (8005d5c <UART_SetConfig+0x334>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d177      	bne.n	8005bb8 <UART_SetConfig+0x190>
 8005ac8:	4ba5      	ldr	r3, [pc, #660]	@ (8005d60 <UART_SetConfig+0x338>)
 8005aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005acc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ad0:	2b28      	cmp	r3, #40	@ 0x28
 8005ad2:	d86d      	bhi.n	8005bb0 <UART_SetConfig+0x188>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <UART_SetConfig+0xb4>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005bb1 	.word	0x08005bb1
 8005ae4:	08005bb1 	.word	0x08005bb1
 8005ae8:	08005bb1 	.word	0x08005bb1
 8005aec:	08005bb1 	.word	0x08005bb1
 8005af0:	08005bb1 	.word	0x08005bb1
 8005af4:	08005bb1 	.word	0x08005bb1
 8005af8:	08005bb1 	.word	0x08005bb1
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005bb1 	.word	0x08005bb1
 8005b04:	08005bb1 	.word	0x08005bb1
 8005b08:	08005bb1 	.word	0x08005bb1
 8005b0c:	08005bb1 	.word	0x08005bb1
 8005b10:	08005bb1 	.word	0x08005bb1
 8005b14:	08005bb1 	.word	0x08005bb1
 8005b18:	08005bb1 	.word	0x08005bb1
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005bb1 	.word	0x08005bb1
 8005b24:	08005bb1 	.word	0x08005bb1
 8005b28:	08005bb1 	.word	0x08005bb1
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005bb1 	.word	0x08005bb1
 8005b34:	08005bb1 	.word	0x08005bb1
 8005b38:	08005bb1 	.word	0x08005bb1
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005bb1 	.word	0x08005bb1
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005bb1 	.word	0x08005bb1
 8005b54:	08005bb1 	.word	0x08005bb1
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005bb1 	.word	0x08005bb1
 8005b68:	08005bb1 	.word	0x08005bb1
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e326      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e322      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e31e      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e31a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e316      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ba8:	2340      	movs	r3, #64	@ 0x40
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e312      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e30e      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a69      	ldr	r2, [pc, #420]	@ (8005d64 <UART_SetConfig+0x33c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d130      	bne.n	8005c24 <UART_SetConfig+0x1fc>
 8005bc2:	4b67      	ldr	r3, [pc, #412]	@ (8005d60 <UART_SetConfig+0x338>)
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d826      	bhi.n	8005c1c <UART_SetConfig+0x1f4>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <UART_SetConfig+0x1ac>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bed 	.word	0x08005bed
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005bfd 	.word	0x08005bfd
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e2f0      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e2ec      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e2e8      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e2e4      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e2e0      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c14:	2340      	movs	r3, #64	@ 0x40
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e2dc      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c1c:	2380      	movs	r3, #128	@ 0x80
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e2d8      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a4f      	ldr	r2, [pc, #316]	@ (8005d68 <UART_SetConfig+0x340>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d130      	bne.n	8005c90 <UART_SetConfig+0x268>
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d60 <UART_SetConfig+0x338>)
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d826      	bhi.n	8005c88 <UART_SetConfig+0x260>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0x218>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c59 	.word	0x08005c59
 8005c44:	08005c61 	.word	0x08005c61
 8005c48:	08005c69 	.word	0x08005c69
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e2ba      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c60:	2304      	movs	r3, #4
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e2b6      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e2b2      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e2ae      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e2aa      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c80:	2340      	movs	r3, #64	@ 0x40
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e2a6      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c88:	2380      	movs	r3, #128	@ 0x80
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e2a2      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <UART_SetConfig+0x344>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d130      	bne.n	8005cfc <UART_SetConfig+0x2d4>
 8005c9a:	4b31      	ldr	r3, [pc, #196]	@ (8005d60 <UART_SetConfig+0x338>)
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d826      	bhi.n	8005cf4 <UART_SetConfig+0x2cc>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <UART_SetConfig+0x284>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005cd5 	.word	0x08005cd5
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e284      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e280      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e27c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e278      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e274      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005cec:	2340      	movs	r3, #64	@ 0x40
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e270      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e26c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <UART_SetConfig+0x348>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d142      	bne.n	8005d8c <UART_SetConfig+0x364>
 8005d06:	4b16      	ldr	r3, [pc, #88]	@ (8005d60 <UART_SetConfig+0x338>)
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d838      	bhi.n	8005d84 <UART_SetConfig+0x35c>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <UART_SetConfig+0x2f0>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d31 	.word	0x08005d31
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	08005d41 	.word	0x08005d41
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e24e      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e24a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e246      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e242      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d50:	cfff69f3 	.word	0xcfff69f3
 8005d54:	58000c00 	.word	0x58000c00
 8005d58:	11fff4ff 	.word	0x11fff4ff
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	58024400 	.word	0x58024400
 8005d64:	40004400 	.word	0x40004400
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	40005000 	.word	0x40005000
 8005d74:	2320      	movs	r3, #32
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e22c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d7c:	2340      	movs	r3, #64	@ 0x40
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e228      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e224      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4ab1      	ldr	r2, [pc, #708]	@ (8006058 <UART_SetConfig+0x630>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d176      	bne.n	8005e84 <UART_SetConfig+0x45c>
 8005d96:	4bb1      	ldr	r3, [pc, #708]	@ (800605c <UART_SetConfig+0x634>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d9e:	2b28      	cmp	r3, #40	@ 0x28
 8005da0:	d86c      	bhi.n	8005e7c <UART_SetConfig+0x454>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <UART_SetConfig+0x380>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e7d 	.word	0x08005e7d
 8005db0:	08005e7d 	.word	0x08005e7d
 8005db4:	08005e7d 	.word	0x08005e7d
 8005db8:	08005e7d 	.word	0x08005e7d
 8005dbc:	08005e7d 	.word	0x08005e7d
 8005dc0:	08005e7d 	.word	0x08005e7d
 8005dc4:	08005e7d 	.word	0x08005e7d
 8005dc8:	08005e55 	.word	0x08005e55
 8005dcc:	08005e7d 	.word	0x08005e7d
 8005dd0:	08005e7d 	.word	0x08005e7d
 8005dd4:	08005e7d 	.word	0x08005e7d
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005e7d 	.word	0x08005e7d
 8005de0:	08005e7d 	.word	0x08005e7d
 8005de4:	08005e7d 	.word	0x08005e7d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e7d 	.word	0x08005e7d
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005e7d 	.word	0x08005e7d
 8005df8:	08005e7d 	.word	0x08005e7d
 8005dfc:	08005e7d 	.word	0x08005e7d
 8005e00:	08005e7d 	.word	0x08005e7d
 8005e04:	08005e7d 	.word	0x08005e7d
 8005e08:	08005e65 	.word	0x08005e65
 8005e0c:	08005e7d 	.word	0x08005e7d
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005e7d 	.word	0x08005e7d
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e7d 	.word	0x08005e7d
 8005e20:	08005e7d 	.word	0x08005e7d
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e6d 	.word	0x08005e6d
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e7d 	.word	0x08005e7d
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e1c0      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e1bc      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e1b8      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e1b4      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e1b0      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e1ac      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e1a8      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a75      	ldr	r2, [pc, #468]	@ (8006060 <UART_SetConfig+0x638>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d130      	bne.n	8005ef0 <UART_SetConfig+0x4c8>
 8005e8e:	4b73      	ldr	r3, [pc, #460]	@ (800605c <UART_SetConfig+0x634>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d826      	bhi.n	8005ee8 <UART_SetConfig+0x4c0>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x478>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb9 	.word	0x08005eb9
 8005ea4:	08005ec1 	.word	0x08005ec1
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e18a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e186      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e182      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e17e      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e17a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ee0:	2340      	movs	r3, #64	@ 0x40
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e176      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e172      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8006064 <UART_SetConfig+0x63c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d130      	bne.n	8005f5c <UART_SetConfig+0x534>
 8005efa:	4b58      	ldr	r3, [pc, #352]	@ (800605c <UART_SetConfig+0x634>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d826      	bhi.n	8005f54 <UART_SetConfig+0x52c>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x4e4>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f25 	.word	0x08005f25
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e154      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e150      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e14c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e148      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f44:	2320      	movs	r3, #32
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e144      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e140      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e13c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a41      	ldr	r2, [pc, #260]	@ (8006068 <UART_SetConfig+0x640>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	f040 8082 	bne.w	800606c <UART_SetConfig+0x644>
 8005f68:	4b3c      	ldr	r3, [pc, #240]	@ (800605c <UART_SetConfig+0x634>)
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f70:	2b28      	cmp	r3, #40	@ 0x28
 8005f72:	d86d      	bhi.n	8006050 <UART_SetConfig+0x628>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0x554>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08006021 	.word	0x08006021
 8005f80:	08006051 	.word	0x08006051
 8005f84:	08006051 	.word	0x08006051
 8005f88:	08006051 	.word	0x08006051
 8005f8c:	08006051 	.word	0x08006051
 8005f90:	08006051 	.word	0x08006051
 8005f94:	08006051 	.word	0x08006051
 8005f98:	08006051 	.word	0x08006051
 8005f9c:	08006029 	.word	0x08006029
 8005fa0:	08006051 	.word	0x08006051
 8005fa4:	08006051 	.word	0x08006051
 8005fa8:	08006051 	.word	0x08006051
 8005fac:	08006051 	.word	0x08006051
 8005fb0:	08006051 	.word	0x08006051
 8005fb4:	08006051 	.word	0x08006051
 8005fb8:	08006051 	.word	0x08006051
 8005fbc:	08006031 	.word	0x08006031
 8005fc0:	08006051 	.word	0x08006051
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	08006051 	.word	0x08006051
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006051 	.word	0x08006051
 8005fd4:	08006051 	.word	0x08006051
 8005fd8:	08006051 	.word	0x08006051
 8005fdc:	08006039 	.word	0x08006039
 8005fe0:	08006051 	.word	0x08006051
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	08006051 	.word	0x08006051
 8005ff4:	08006051 	.word	0x08006051
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006041 	.word	0x08006041
 8006000:	08006051 	.word	0x08006051
 8006004:	08006051 	.word	0x08006051
 8006008:	08006051 	.word	0x08006051
 800600c:	08006051 	.word	0x08006051
 8006010:	08006051 	.word	0x08006051
 8006014:	08006051 	.word	0x08006051
 8006018:	08006051 	.word	0x08006051
 800601c:	08006049 	.word	0x08006049
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e0d6      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e0d2      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e0ce      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e0ca      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006040:	2320      	movs	r3, #32
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e0c6      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006048:	2340      	movs	r3, #64	@ 0x40
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e0c2      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e0be      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006058:	40011400 	.word	0x40011400
 800605c:	58024400 	.word	0x58024400
 8006060:	40007800 	.word	0x40007800
 8006064:	40007c00 	.word	0x40007c00
 8006068:	40011800 	.word	0x40011800
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4aad      	ldr	r2, [pc, #692]	@ (8006328 <UART_SetConfig+0x900>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d176      	bne.n	8006164 <UART_SetConfig+0x73c>
 8006076:	4bad      	ldr	r3, [pc, #692]	@ (800632c <UART_SetConfig+0x904>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800607e:	2b28      	cmp	r3, #40	@ 0x28
 8006080:	d86c      	bhi.n	800615c <UART_SetConfig+0x734>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0x660>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	0800612d 	.word	0x0800612d
 800608c:	0800615d 	.word	0x0800615d
 8006090:	0800615d 	.word	0x0800615d
 8006094:	0800615d 	.word	0x0800615d
 8006098:	0800615d 	.word	0x0800615d
 800609c:	0800615d 	.word	0x0800615d
 80060a0:	0800615d 	.word	0x0800615d
 80060a4:	0800615d 	.word	0x0800615d
 80060a8:	08006135 	.word	0x08006135
 80060ac:	0800615d 	.word	0x0800615d
 80060b0:	0800615d 	.word	0x0800615d
 80060b4:	0800615d 	.word	0x0800615d
 80060b8:	0800615d 	.word	0x0800615d
 80060bc:	0800615d 	.word	0x0800615d
 80060c0:	0800615d 	.word	0x0800615d
 80060c4:	0800615d 	.word	0x0800615d
 80060c8:	0800613d 	.word	0x0800613d
 80060cc:	0800615d 	.word	0x0800615d
 80060d0:	0800615d 	.word	0x0800615d
 80060d4:	0800615d 	.word	0x0800615d
 80060d8:	0800615d 	.word	0x0800615d
 80060dc:	0800615d 	.word	0x0800615d
 80060e0:	0800615d 	.word	0x0800615d
 80060e4:	0800615d 	.word	0x0800615d
 80060e8:	08006145 	.word	0x08006145
 80060ec:	0800615d 	.word	0x0800615d
 80060f0:	0800615d 	.word	0x0800615d
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	0800615d 	.word	0x0800615d
 8006100:	0800615d 	.word	0x0800615d
 8006104:	0800615d 	.word	0x0800615d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800615d 	.word	0x0800615d
 8006110:	0800615d 	.word	0x0800615d
 8006114:	0800615d 	.word	0x0800615d
 8006118:	0800615d 	.word	0x0800615d
 800611c:	0800615d 	.word	0x0800615d
 8006120:	0800615d 	.word	0x0800615d
 8006124:	0800615d 	.word	0x0800615d
 8006128:	08006155 	.word	0x08006155
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e050      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006134:	2304      	movs	r3, #4
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e04c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 800613c:	2308      	movs	r3, #8
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e048      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006144:	2310      	movs	r3, #16
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e044      	b.n	80061d6 <UART_SetConfig+0x7ae>
 800614c:	2320      	movs	r3, #32
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e040      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006154:	2340      	movs	r3, #64	@ 0x40
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e03c      	b.n	80061d6 <UART_SetConfig+0x7ae>
 800615c:	2380      	movs	r3, #128	@ 0x80
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e038      	b.n	80061d6 <UART_SetConfig+0x7ae>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a71      	ldr	r2, [pc, #452]	@ (8006330 <UART_SetConfig+0x908>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d130      	bne.n	80061d0 <UART_SetConfig+0x7a8>
 800616e:	4b6f      	ldr	r3, [pc, #444]	@ (800632c <UART_SetConfig+0x904>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b05      	cmp	r3, #5
 8006178:	d826      	bhi.n	80061c8 <UART_SetConfig+0x7a0>
 800617a:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <UART_SetConfig+0x758>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006199 	.word	0x08006199
 8006184:	080061a1 	.word	0x080061a1
 8006188:	080061a9 	.word	0x080061a9
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b9 	.word	0x080061b9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	2302      	movs	r3, #2
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e01a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e016      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e012      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b6:	e00e      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061b8:	2320      	movs	r3, #32
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061be:	e00a      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061c0:	2340      	movs	r3, #64	@ 0x40
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c6:	e006      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e002      	b.n	80061d6 <UART_SetConfig+0x7ae>
 80061d0:	2380      	movs	r3, #128	@ 0x80
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a55      	ldr	r2, [pc, #340]	@ (8006330 <UART_SetConfig+0x908>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	f040 80f8 	bne.w	80063d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	dc46      	bgt.n	8006278 <UART_SetConfig+0x850>
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	db75      	blt.n	80062da <UART_SetConfig+0x8b2>
 80061ee:	3b02      	subs	r3, #2
 80061f0:	2b1e      	cmp	r3, #30
 80061f2:	d872      	bhi.n	80062da <UART_SetConfig+0x8b2>
 80061f4:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <UART_SetConfig+0x7d4>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	0800627f 	.word	0x0800627f
 8006200:	080062db 	.word	0x080062db
 8006204:	08006287 	.word	0x08006287
 8006208:	080062db 	.word	0x080062db
 800620c:	080062db 	.word	0x080062db
 8006210:	080062db 	.word	0x080062db
 8006214:	08006297 	.word	0x08006297
 8006218:	080062db 	.word	0x080062db
 800621c:	080062db 	.word	0x080062db
 8006220:	080062db 	.word	0x080062db
 8006224:	080062db 	.word	0x080062db
 8006228:	080062db 	.word	0x080062db
 800622c:	080062db 	.word	0x080062db
 8006230:	080062db 	.word	0x080062db
 8006234:	080062a7 	.word	0x080062a7
 8006238:	080062db 	.word	0x080062db
 800623c:	080062db 	.word	0x080062db
 8006240:	080062db 	.word	0x080062db
 8006244:	080062db 	.word	0x080062db
 8006248:	080062db 	.word	0x080062db
 800624c:	080062db 	.word	0x080062db
 8006250:	080062db 	.word	0x080062db
 8006254:	080062db 	.word	0x080062db
 8006258:	080062db 	.word	0x080062db
 800625c:	080062db 	.word	0x080062db
 8006260:	080062db 	.word	0x080062db
 8006264:	080062db 	.word	0x080062db
 8006268:	080062db 	.word	0x080062db
 800626c:	080062db 	.word	0x080062db
 8006270:	080062db 	.word	0x080062db
 8006274:	080062cd 	.word	0x080062cd
 8006278:	2b40      	cmp	r3, #64	@ 0x40
 800627a:	d02a      	beq.n	80062d2 <UART_SetConfig+0x8aa>
 800627c:	e02d      	b.n	80062da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800627e:	f7fe fa9d 	bl	80047bc <HAL_RCCEx_GetD3PCLK1Freq>
 8006282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006284:	e02f      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe faac 	bl	80047e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	e027      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006296:	f107 0318 	add.w	r3, r7, #24
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fbf8 	bl	8004a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a4:	e01f      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a6:	4b21      	ldr	r3, [pc, #132]	@ (800632c <UART_SetConfig+0x904>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062b2:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <UART_SetConfig+0x904>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <UART_SetConfig+0x90c>)
 80062be:	fa22 f303 	lsr.w	r3, r2, r3
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062c4:	e00f      	b.n	80062e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006334 <UART_SetConfig+0x90c>)
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ca:	e00c      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006338 <UART_SetConfig+0x910>)
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d0:	e009      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d8:	e005      	b.n	80062e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 81ee 	beq.w	80066ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	4a12      	ldr	r2, [pc, #72]	@ (800633c <UART_SetConfig+0x914>)
 80062f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006300:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630e:	429a      	cmp	r2, r3
 8006310:	d305      	bcc.n	800631e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631a:	429a      	cmp	r2, r3
 800631c:	d910      	bls.n	8006340 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006324:	e1d1      	b.n	80066ca <UART_SetConfig+0xca2>
 8006326:	bf00      	nop
 8006328:	40011c00 	.word	0x40011c00
 800632c:	58024400 	.word	0x58024400
 8006330:	58000c00 	.word	0x58000c00
 8006334:	03d09000 	.word	0x03d09000
 8006338:	003d0900 	.word	0x003d0900
 800633c:	08006f10 	.word	0x08006f10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006342:	2200      	movs	r2, #0
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	60fa      	str	r2, [r7, #12]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	4ac0      	ldr	r2, [pc, #768]	@ (8006650 <UART_SetConfig+0xc28>)
 800634e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006352:	b29b      	uxth	r3, r3
 8006354:	2200      	movs	r2, #0
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006362:	f7f9 ffe3 	bl	800032c <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	020b      	lsls	r3, r1, #8
 8006378:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800637c:	0202      	lsls	r2, r0, #8
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	6849      	ldr	r1, [r1, #4]
 8006382:	0849      	lsrs	r1, r1, #1
 8006384:	2000      	movs	r0, #0
 8006386:	460c      	mov	r4, r1
 8006388:	4605      	mov	r5, r0
 800638a:	eb12 0804 	adds.w	r8, r2, r4
 800638e:	eb43 0905 	adc.w	r9, r3, r5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	469a      	mov	sl, r3
 800639a:	4693      	mov	fp, r2
 800639c:	4652      	mov	r2, sl
 800639e:	465b      	mov	r3, fp
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7f9 ffc2 	bl	800032c <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4613      	mov	r3, r2
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b6:	d308      	bcc.n	80063ca <UART_SetConfig+0x9a2>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063be:	d204      	bcs.n	80063ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e17f      	b.n	80066ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063d0:	e17b      	b.n	80066ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063da:	f040 80bd 	bne.w	8006558 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80063de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	dc48      	bgt.n	8006478 <UART_SetConfig+0xa50>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	db7b      	blt.n	80064e2 <UART_SetConfig+0xaba>
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d879      	bhi.n	80064e2 <UART_SetConfig+0xaba>
 80063ee:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <UART_SetConfig+0x9cc>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	0800647f 	.word	0x0800647f
 80063f8:	08006487 	.word	0x08006487
 80063fc:	080064e3 	.word	0x080064e3
 8006400:	080064e3 	.word	0x080064e3
 8006404:	0800648f 	.word	0x0800648f
 8006408:	080064e3 	.word	0x080064e3
 800640c:	080064e3 	.word	0x080064e3
 8006410:	080064e3 	.word	0x080064e3
 8006414:	0800649f 	.word	0x0800649f
 8006418:	080064e3 	.word	0x080064e3
 800641c:	080064e3 	.word	0x080064e3
 8006420:	080064e3 	.word	0x080064e3
 8006424:	080064e3 	.word	0x080064e3
 8006428:	080064e3 	.word	0x080064e3
 800642c:	080064e3 	.word	0x080064e3
 8006430:	080064e3 	.word	0x080064e3
 8006434:	080064af 	.word	0x080064af
 8006438:	080064e3 	.word	0x080064e3
 800643c:	080064e3 	.word	0x080064e3
 8006440:	080064e3 	.word	0x080064e3
 8006444:	080064e3 	.word	0x080064e3
 8006448:	080064e3 	.word	0x080064e3
 800644c:	080064e3 	.word	0x080064e3
 8006450:	080064e3 	.word	0x080064e3
 8006454:	080064e3 	.word	0x080064e3
 8006458:	080064e3 	.word	0x080064e3
 800645c:	080064e3 	.word	0x080064e3
 8006460:	080064e3 	.word	0x080064e3
 8006464:	080064e3 	.word	0x080064e3
 8006468:	080064e3 	.word	0x080064e3
 800646c:	080064e3 	.word	0x080064e3
 8006470:	080064e3 	.word	0x080064e3
 8006474:	080064d5 	.word	0x080064d5
 8006478:	2b40      	cmp	r3, #64	@ 0x40
 800647a:	d02e      	beq.n	80064da <UART_SetConfig+0xab2>
 800647c:	e031      	b.n	80064e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800647e:	f7fc ffd1 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8006482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006484:	e033      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006486:	f7fc ffe3 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 800648a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800648c:	e02f      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe f9a8 	bl	80047e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649c:	e027      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800649e:	f107 0318 	add.w	r3, r7, #24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe faf4 	bl	8004a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ac:	e01f      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ae:	4b69      	ldr	r3, [pc, #420]	@ (8006654 <UART_SetConfig+0xc2c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ba:	4b66      	ldr	r3, [pc, #408]	@ (8006654 <UART_SetConfig+0xc2c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	4a64      	ldr	r2, [pc, #400]	@ (8006658 <UART_SetConfig+0xc30>)
 80064c6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064cc:	e00f      	b.n	80064ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80064ce:	4b62      	ldr	r3, [pc, #392]	@ (8006658 <UART_SetConfig+0xc30>)
 80064d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d2:	e00c      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064d4:	4b61      	ldr	r3, [pc, #388]	@ (800665c <UART_SetConfig+0xc34>)
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ea 	beq.w	80066ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	4a55      	ldr	r2, [pc, #340]	@ (8006650 <UART_SetConfig+0xc28>)
 80064fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006500:	461a      	mov	r2, r3
 8006502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006504:	fbb3 f3f2 	udiv	r3, r3, r2
 8006508:	005a      	lsls	r2, r3, #1
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	441a      	add	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	2b0f      	cmp	r3, #15
 8006520:	d916      	bls.n	8006550 <UART_SetConfig+0xb28>
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006528:	d212      	bcs.n	8006550 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	b29b      	uxth	r3, r3
 800652e:	f023 030f 	bic.w	r3, r3, #15
 8006532:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	b29a      	uxth	r2, r3
 8006540:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006542:	4313      	orrs	r3, r2
 8006544:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	e0bc      	b.n	80066ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006556:	e0b8      	b.n	80066ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006558:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800655c:	2b20      	cmp	r3, #32
 800655e:	dc4b      	bgt.n	80065f8 <UART_SetConfig+0xbd0>
 8006560:	2b00      	cmp	r3, #0
 8006562:	f2c0 8087 	blt.w	8006674 <UART_SetConfig+0xc4c>
 8006566:	2b20      	cmp	r3, #32
 8006568:	f200 8084 	bhi.w	8006674 <UART_SetConfig+0xc4c>
 800656c:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <UART_SetConfig+0xb4c>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065ff 	.word	0x080065ff
 8006578:	08006607 	.word	0x08006607
 800657c:	08006675 	.word	0x08006675
 8006580:	08006675 	.word	0x08006675
 8006584:	0800660f 	.word	0x0800660f
 8006588:	08006675 	.word	0x08006675
 800658c:	08006675 	.word	0x08006675
 8006590:	08006675 	.word	0x08006675
 8006594:	0800661f 	.word	0x0800661f
 8006598:	08006675 	.word	0x08006675
 800659c:	08006675 	.word	0x08006675
 80065a0:	08006675 	.word	0x08006675
 80065a4:	08006675 	.word	0x08006675
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	0800662f 	.word	0x0800662f
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	08006675 	.word	0x08006675
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006675 	.word	0x08006675
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006667 	.word	0x08006667
 80065f8:	2b40      	cmp	r3, #64	@ 0x40
 80065fa:	d037      	beq.n	800666c <UART_SetConfig+0xc44>
 80065fc:	e03a      	b.n	8006674 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fe:	f7fc ff11 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8006602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006604:	e03c      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006606:	f7fc ff23 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 800660a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800660c:	e038      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe f8e8 	bl	80047e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e030      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661e:	f107 0318 	add.w	r3, r7, #24
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fa34 	bl	8004a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800662c:	e028      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800662e:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <UART_SetConfig+0xc2c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d012      	beq.n	8006660 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800663a:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <UART_SetConfig+0xc2c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a04      	ldr	r2, [pc, #16]	@ (8006658 <UART_SetConfig+0xc30>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800664c:	e018      	b.n	8006680 <UART_SetConfig+0xc58>
 800664e:	bf00      	nop
 8006650:	08006f10 	.word	0x08006f10
 8006654:	58024400 	.word	0x58024400
 8006658:	03d09000 	.word	0x03d09000
 800665c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006660:	4b24      	ldr	r3, [pc, #144]	@ (80066f4 <UART_SetConfig+0xccc>)
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	e00c      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006666:	4b24      	ldr	r3, [pc, #144]	@ (80066f8 <UART_SetConfig+0xcd0>)
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666a:	e009      	b.n	8006680 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006672:	e005      	b.n	8006680 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800667e:	bf00      	nop
    }

    if (pclk != 0U)
 8006680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d021      	beq.n	80066ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	4a1c      	ldr	r2, [pc, #112]	@ (80066fc <UART_SetConfig+0xcd4>)
 800668c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006690:	461a      	mov	r2, r3
 8006692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006694:	fbb3 f2f2 	udiv	r2, r3, r2
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	441a      	add	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	2b0f      	cmp	r3, #15
 80066ae:	d909      	bls.n	80066c4 <UART_SetConfig+0xc9c>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b6:	d205      	bcs.n	80066c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e002      	b.n	80066ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2200      	movs	r2, #0
 80066e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3748      	adds	r7, #72	@ 0x48
 80066ee:	46bd      	mov	sp, r7
 80066f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f4:	03d09000 	.word	0x03d09000
 80066f8:	003d0900 	.word	0x003d0900
 80066fc:	08006f10 	.word	0x08006f10

08006700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01a      	beq.n	8006816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067fe:	d10a      	bne.n	8006816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b098      	sub	sp, #96	@ 0x60
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006854:	f7fa fb50 	bl	8000ef8 <HAL_GetTick>
 8006858:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d12f      	bne.n	80068c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f88e 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d022      	beq.n	80068c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006896:	653b      	str	r3, [r7, #80]	@ 0x50
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e063      	b.n	8006990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d149      	bne.n	800696a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068de:	2200      	movs	r2, #0
 80068e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f857 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d03c      	beq.n	800696a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	623b      	str	r3, [r7, #32]
   return(result);
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006910:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60fb      	str	r3, [r7, #12]
   return(result);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006942:	61fa      	str	r2, [r7, #28]
 8006944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	617b      	str	r3, [r7, #20]
   return(result);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e012      	b.n	8006990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3758      	adds	r7, #88	@ 0x58
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	4613      	mov	r3, r2
 80069a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a8:	e04f      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d04b      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fa faa1 	bl	8000ef8 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e04e      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d037      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b80      	cmp	r3, #128	@ 0x80
 80069de:	d034      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	d031      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d110      	bne.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2208      	movs	r2, #8
 80069fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f839 	bl	8006a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2208      	movs	r2, #8
 8006a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e029      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a24:	d111      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f81f 	bl	8006a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e00f      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4013      	ands	r3, r2
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d0a0      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b095      	sub	sp, #84	@ 0x54
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b3c <UART_EndRxTransfer+0xc8>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e5      	bne.n	8006aae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d118      	bne.n	8006b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f023 0310 	bic.w	r3, r3, #16
 8006afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6979      	ldr	r1, [r7, #20]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	613b      	str	r3, [r7, #16]
   return(result);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b30:	bf00      	nop
 8006b32:	3754      	adds	r7, #84	@ 0x54
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	effffffe 	.word	0xeffffffe

08006b40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7fe ff50 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6979      	ldr	r1, [r7, #20]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	613b      	str	r3, [r7, #16]
   return(result);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fe ff1b 	bl	80059e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb2:	bf00      	nop
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e027      	b.n	8006c5c <HAL_UARTEx_DisableFifoMode+0x66>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	@ 0x24
 8006c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e02d      	b.n	8006cdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	@ 0x24
 8006c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f84f 	bl	8006d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e02d      	b.n	8006d58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	@ 0x24
 8006d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f811 	bl	8006d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d108      	bne.n	8006d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d80:	e031      	b.n	8006de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d82:	2310      	movs	r3, #16
 8006d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d86:	2310      	movs	r3, #16
 8006d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	0e5b      	lsrs	r3, r3, #25
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	0f5b      	lsrs	r3, r3, #29
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	7b3a      	ldrb	r2, [r7, #12]
 8006dae:	4911      	ldr	r1, [pc, #68]	@ (8006df4 <UARTEx_SetNbDataToProcess+0x94>)
 8006db0:	5c8a      	ldrb	r2, [r1, r2]
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006db6:	7b3a      	ldrb	r2, [r7, #12]
 8006db8:	490f      	ldr	r1, [pc, #60]	@ (8006df8 <UARTEx_SetNbDataToProcess+0x98>)
 8006dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	7b7a      	ldrb	r2, [r7, #13]
 8006dcc:	4909      	ldr	r1, [pc, #36]	@ (8006df4 <UARTEx_SetNbDataToProcess+0x94>)
 8006dce:	5c8a      	ldrb	r2, [r1, r2]
 8006dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dd4:	7b7a      	ldrb	r2, [r7, #13]
 8006dd6:	4908      	ldr	r1, [pc, #32]	@ (8006df8 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	08006f28 	.word	0x08006f28
 8006df8:	08006f30 	.word	0x08006f30

08006dfc <memset>:
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	@ (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2600      	movs	r6, #0
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e50 <__libc_init_array+0x44>)
 8006e20:	f000 f818 	bl	8006e54 <_init>
 8006e24:	1b64      	subs	r4, r4, r5
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2600      	movs	r6, #0
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	4798      	blx	r3
 8006e36:	3601      	adds	r6, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	4798      	blx	r3
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006f40 	.word	0x08006f40
 8006e48:	08006f40 	.word	0x08006f40
 8006e4c:	08006f40 	.word	0x08006f40
 8006e50:	08006f44 	.word	0x08006f44

08006e54 <_init>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr

08006e60 <_fini>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	bf00      	nop
 8006e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e66:	bc08      	pop	{r3}
 8006e68:	469e      	mov	lr, r3
 8006e6a:	4770      	bx	lr
